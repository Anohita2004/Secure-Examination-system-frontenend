This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.github/workflows/frontend-ci.yml
.gitignore
.yo-rc.json
controllers/userController.js
eslint.config.js
karma-ci-cov.conf.js
karma-ci.conf.js
karma.conf.js
LICENSE
package.json
README.md
routes/user.js
server.js
ui5-dist.yaml
ui5-local.yaml
ui5.yaml
webapp/Component.js
webapp/controller/AdminDashboard.controller.js
webapp/controller/AnalyticsDashboard.controller.js
webapp/controller/App.controller.js
webapp/controller/BaseController.js
webapp/controller/EmployeeDashboard.controller.js
webapp/controller/Exam.controller.js
webapp/controller/LoginAdmin.controller.js
webapp/controller/LoginEmployee.controller.js
webapp/controller/Main.controller.js
webapp/controller/ResetPassword.controller.js
webapp/controller/SuperAdminDashboard.controller.js
webapp/controller/SuperAdminResetPassword.controller.js
webapp/css/custom.css
webapp/css/superadmin.css
webapp/i18n/i18n_de.properties
webapp/i18n/i18n_en.properties
webapp/i18n/i18n.properties
webapp/index-cdn.html
webapp/index.html
webapp/manifest.json
webapp/model/AuthService.js
webapp/model/ExamService.js
webapp/model/formatter.js
webapp/model/models.js
webapp/model/PermissionChecker.js
webapp/model/PermissionService.js
webapp/reset-password.html
webapp/reset-password/index.html
webapp/test/e2e/sample.test.js
webapp/test/e2e/wdio.conf.js
webapp/test/flpSandbox.html
webapp/test/integration/HelloJourney.js
webapp/test/integration/opaTests.qunit.js
webapp/test/integration/pages/Main.js
webapp/test/locate-reuse-libs.js
webapp/test/Test.qunit.html
webapp/test/testsuite.qunit.html
webapp/test/testsuite.qunit.js
webapp/test/unit/controller/App.qunit.js
webapp/test/unit/uniTests.qunit.html
webapp/test/unit/unitTests.qunit.js
webapp/view/AdminDashboard.view.xml
webapp/view/AnalyticsDashboard.view.xml
webapp/view/AnnouncementDialog.fragment.xml
webapp/view/App.view.xml
webapp/view/EmployeeDashboard.view.xml
webapp/view/Exam.view.xml
webapp/view/LoginAdmin.view.xml
webapp/view/LoginEmployee.view.xml
webapp/view/Main.view.xml
webapp/view/Main.view.xml.backup
webapp/view/QuestionNavButton.fragment.xml
webapp/view/ResetPassword.view.xml
webapp/view/SuperAdminDashboard.view.xml
webapp/view/SuperAdminResetPassword.view.xml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# EditorConfig helps developers define and maintain consistent
# coding styles between different editors and IDEs
# editorconfig.org

root = true

[*]
# We recommend you to keep these unchanged
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

# Change these settings to your own preference
indent_style = tab

[*.{yaml,yml,md,json,xml,properties}]
indent_size = 2
indent_style = space

[*.md]
trim_trailing_whitespace = false
</file>

<file path=".yo-rc.json">
{
  "generator-ui5-app": {
    "namespace": "exam",
    "framework": "SAPUI5",
    "frameworkVersion": "1.136.2",
    "author": "Anohita",
    "initrepo": true,
    "appId": "exam",
    "appURI": "exam",
    "cdnDomain": "ui5.sap.com",
    "defaultTheme": "sap_horizon",
    "qunitCoverageFile": "qunit-coverage-istanbul.js",
    "gte1_98_0": true,
    "gte1_104_0": true,
    "lt1_124_0": false,
    "setupCompleted": true
  }
}
</file>

<file path="karma-ci-cov.conf.js">
module.exports = function (config) {
	"use strict";

	require("./karma-ci.conf")(config);
	config.set({
		reporters: ["progress", "coverage"],
		preprocessors: {
			"webapp/**/*.js": ["coverage"]
		},
		coverageReporter: {
			dir: "coverage",
			reporters: [
				{ type: "html", subdir: "report-html" },
				{ type: "cobertura", subdir: ".", file: "cobertura.txt" },
				{ type: "lcovonly", subdir: ".", file: "report-lcovonly.txt" },
				{ type: "text-summary" }
			]
		}
	});
};
</file>

<file path="LICENSE">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="README.md">
# UI5 Application exam

Insert the purpose of this project and some interesting info here...

## Description

This app demonstrates a setup for developing UI5 applications.

## Requirements

Either [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/) for dependency management.

## Preparation

Use `npm` (or `yarn`) to install the dependencies:

```sh
npm install
```

(To use yarn, just do `yarn` instead.)

## Run the App

Execute the following command to run the app locally for development in watch mode (the browser reloads the app automatically when there are changes in the source code):

```sh
npm start
```

As shown in the terminal after executing this command, the app is then running on http://localhost:8080/index.html. A browser window with this URL should automatically open.

(When using yarn, do `yarn start` instead.)

## Build the App

### Unoptimized (but quick)

Execute the following command to build the project and get an app that can be deployed:

```sh
npm run build
```

The result is placed into the `dist` folder. To start the generated package, just run

```sh
npm run start:dist
```

Note that `index.html` still loads the UI5 framework from the relative URL `resources/...`, which does not physically exist, but is only provided dynamically by the UI5 tooling. So for an actual deployment you should change this URL to either [the CDN](https://sdk.openui5.org/#/topic/2d3eb2f322ea4a82983c1c62a33ec4ae) or your local deployment of UI5.

(When using yarn, do `yarn build` and `yarn start:dist` instead.)

### Optimized

For an optimized self-contained build (takes longer because the UI5 resources are built, too), do:

```sh
npm run build:opt
```

To start the generated package, again just run:

```sh
npm run start:dist
```

In this case, all UI5 framework resources are also available within the `dist` folder, so the folder can be deployed as-is to any static web server, without changing the bootstrap URL.

With the self-contained build, the bootstrap URL in `index.html` has already been modified to load the newly created `sap-ui-custom.js` for bootstrapping, which contains all app resources as well as all needed UI5 JavaScript resources. Most UI5 resources inside the `dist` folder are for this reason actually **not** needed to run the app. Only the non-JS-files, like translation texts and CSS files, are used and must also be deployed. (Only when for some reason JS files are missing from the optimized self-contained bundle, they are also loaded separately.)

(When using yarn, do `yarn build:opt` and `yarn start:dist` instead.)

## Check the Code

To lint the code, do:

```sh
npm run lint
```

(Again, when using yarn, do `yarn lint` instead.)

## License

This project is licensed under the Apache Software License, version 2.0 except as noted otherwise in the [LICENSE](LICENSE) file.
</file>

<file path="server.js">
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const cookieParser = require('cookie-parser');
const session = require('express-session');

dotenv.config();
const app = express();

app.use(express.json());
app.use(cookieParser());

app.use(cors({
  origin: 'http://localhost:8080',
  credentials: true
}));

// 🔥 Add session middleware
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: false,
    sameSite: 'lax'
  }
}));
app.use((req, res, next) => {
  console.log("🔐 Session:", req.session);
  next();
});

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/exam', require('./routes/exam'));
app.use('/api/dashboard', require('./routes/dashboard'));
app.use('/api/permissions', require('./routes/permissions'));

// Exams list endpoint (if needed separately)
app.use('/api/exams', require('./routes/exam'));

// User-related endpoints
const userRoutes = require('./routes/user');
app.use('/api/user', userRoutes);

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});
</file>

<file path="ui5-dist.yaml">
specVersion: "4.0"
metadata:
  name: exam
type: application
resources:
  configuration:
    paths:
      webapp: dist
framework:
  name: SAPUI5
  version: "1.136.2"
  libraries:
    - name: sap.m
    - name: sap.ui.core
    - name: themelib_sap_horizon
</file>

<file path="ui5-local.yaml">
specVersion: "3.1"
metadata:
  name: exam
type: application
framework:
  name: SAPUI5
  version: 1.135.0
  libraries:
    - name: sap.ui.core
    - name: sap.m
    - name: sap.f
    - name: sap.ui.comp
    - name: sap.ui.generic.app
    - name: sap.ui.table
    - name: sap.ushell
    - name: themelib_sap_bluecrystal
    - name: themelib_sap_horizon
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
        delay: 300
    - name: fiori-tools-preview
      afterMiddleware: fiori-tools-appreload
      configuration:
        component: exam
        ui5Theme: sap_horizon
</file>

<file path="webapp/Component.js">
sap.ui.define(["sap/ui/core/UIComponent", "sap/ui/Device", "./model/models"], function (UIComponent, Device, models) {
	"use strict";

	return UIComponent.extend("exam.Component", {
		metadata: {
			manifest: "json",
			interfaces: ["sap.ui.core.IAsyncContentCreation"]
		},
		init: function () {
			// call the base component's init function
			UIComponent.prototype.init.call(this); // create the views based on the url/hash

			// create the device model
			this.setModel(models.createDeviceModel(), "device");

			// create the views based on the url/hash
			this.getRouter().initialize();
		},
		/**
		 * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy
		 * design mode class should be set, which influences the size appearance of some controls.
		 * @public
		 * @returns {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set
		 */
		getContentDensityClass: function () {
			if (this.contentDensityClass === undefined) {
				// check whether FLP has already set the content density class; do nothing in this case
				if (document.body.classList.contains("sapUiSizeCozy") || document.body.classList.contains("sapUiSizeCompact")) {
					this.contentDensityClass = "";
				} else if (!Device.support.touch) {
					// apply "compact" mode if touch is not supported
					this.contentDensityClass = "sapUiSizeCompact";
				} else {
					// "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
					this.contentDensityClass = "sapUiSizeCozy";
				}
			}
			return this.contentDensityClass;
		}
	});
});
</file>

<file path="webapp/i18n/i18n_de.properties">
appTitle=exam
appDescription=UI5 Application exam
btnText=Sag Hallo
</file>

<file path="webapp/i18n/i18n_en.properties">
appTitle=exam
appDescription=UI5 Application exam
btnText=Say Hello
</file>

<file path="webapp/i18n/i18n.properties">
appTitle=exam
appDescription=UI5 Application exam
btnText=Say Hello
</file>

<file path="webapp/index-cdn.html">
<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Cache-control" content="no-cache, no-store, must-revalidate" />
		<meta http-equiv="Pragma" content="no-cache" />
		<meta http-equiv="expires" content="0" />
		<meta charset="utf-8" />

		<title>UI5 Application: exam</title>

		<script
			id="sap-ui-bootstrap"
			src="https://ui5.sap.com/1.136.2/resources/sap-ui-core.js"
			data-sap-ui-resourceroots='{
				"exam": "./"
			}'
			data-sap-ui-oninit="module:sap/ui/core/ComponentSupport"
			data-sap-ui-async="true"
			data-sap-ui-compatVersion="edge"
			data-sap-ui-frameOptions="trusted"
		></script>
	</head>

	<body class="sapUiBody">
		<div data-sap-ui-component data-name="exam"></div>
	</body>
</html>
</file>

<file path="webapp/model/AuthService.js">
sap.ui.define([], function () {
    "use strict";
    const BASE_URL = "http://localhost:4000/api";

    return {
        login: function(email, password) {
            console.log("AuthService.login called", email, password); 
            return fetch(BASE_URL + "/auth/login", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email, password }),
                credentials: "include" // <-- important!
            })
            .then(res => {
                console.log("Raw fetch response:", res);
                if (!res.ok) {
                    return res.text().then(text => {
                        console.error("Login failed response text:", text);
                        throw new Error("Login failed with status " + res.status);
                    });
                }
                return res.json();
            })
            // No sessionStorage here!
            .catch(err => {
                console.error("Login error caught:", err);
                throw err;
            });
        },

        getCurrentUser: async function () {
            const res = await fetch(BASE_URL + "/auth/me", {
                credentials: "include"
            });
            if (!res.ok) throw new Error("Not authenticated");
            return await res.json(); // { userId, role, email, name }
        },

        logout: function() {
            return fetch(BASE_URL + "/auth/logout", {
                method: "POST",
                credentials: "include"
            });
        }
    };
});
</file>

<file path="webapp/model/formatter.js">
sap.ui.define(function () {
	"use strict";

	return {
		formatValue: function (value) {
			return value && value.toUpperCase();
		}
	};
});
</file>

<file path="webapp/model/models.js">
sap.ui.define(["sap/ui/model/json/JSONModel", "sap/ui/model/BindingMode", "sap/ui/Device"], function (JSONModel, BindingMode, Device) {
	"use strict";

	return {
		createDeviceModel: function () {
			const oModel = new JSONModel(Device);
			oModel.setDefaultBindingMode(BindingMode.OneWay);
			return oModel;
		}
	};
});
</file>

<file path="webapp/reset-password.html">
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Reset Password</title>
  <script
    id="sap-ui-bootstrap"
    src="https://sapui5.hana.ondemand.com/resources/sap-ui-core.js"
    data-sap-ui-theme="sap_fiori_3"
    data-sap-ui-libs="sap.m"
    data-sap-ui-compatVersion="edge"
    data-sap-ui-onInit="module:sap/ui/core/ComponentSupport"
    data-sap-ui-resourceroots='{"exam": "./"}'>
  </script>
</head>
<body class="sapUiBody">
  <div id="content"></div>

  <script>
    sap.ui.require([
      "sap/ui/core/mvc/XMLView"
    ], function(XMLView) {
      XMLView.create({
        viewName: "exam.view.SuperAdminResetPassword"
      }).then(function(oView){
        oView.placeAt("content");
      });
    });
  </script>
</body>
</html>
</file>

<file path="webapp/reset-password/index.html">
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Redirecting…</title>
  <meta http-equiv="refresh" content="0;url=../index.html">
  <script>
    (function() {
      var params = window.location.search || "";
      // Redirect to UI5 app with hash route, preserving token query string
      window.location.replace("../index.html#reset-password" + params);
    })();
  </script>
</head>
<body>
  Redirecting… If you are not redirected, <a href="../index.html#reset-password">click here</a>.
</body>
</html>
</file>

<file path="webapp/test/e2e/sample.test.js">
const { wdi5 } = require("wdio-ui5-service")

describe("samples", () => {
    it("should log", () => {
        const logger = wdi5.getLogger()
        logger.log("hello world!")
    })

    // intentionally skipping this as you have to adjust things to your UI5 app :)
    it.skip("should retrieve a UI5 control", async () => {
        const appLocator = {
            selector: {
                controlType: "sap.m.App",
                viewName: "ui5.typescript.helloworld.view.App"
            }
        }

        const app = await browser.asControl(appLocator)
        expect(app).toBeDefined()
    })
})
</file>

<file path="webapp/test/e2e/wdio.conf.js">
exports.config = {
    // ====================
    // wdi5 Configuration
    // ====================
    //
    // wdi5: {
    //     screenshotPath: require("path").join("some", "dir", "for", "screenshots"),c // [optional] {string}, default: ""
    //     screenshotsDisabled: false, // [optional] {boolean}, default: false; if set to true, screenshots won't be taken and not written to file system
    //     logLevel: "error", // [optional] error | verbose | silent, default: "error"
    //     skipInjectUI5OnStart: false, // [optional] {boolean}, default: false; true when UI5 is not on the start page, you need to later call <wdioUI5service>.injectUI5() manually
    //     waitForUI5Timeout: 15000 // [optional] {number}, default: 15000; maximum waiting time in milliseconds while checking for UI5 availability
    //     btpWorkZoneEnablement: false // [optional] {boolean}, default: false; whether to instruct wdi5 to inject itself in both the SAP Build Workzone, standard edition, shell and app
    // },
    //
    // ====================
    // Runner Configuration
    // ====================
    //
    //
    // ==================
    // Specify Test Files
    // ==================
    // Define which test specs should run. The pattern is relative to the directory
    // from which `wdio` was called.
    //
    // The specs are defined as an array of spec files (optionally using wildcards
    // that will be expanded). The test for each spec file will be run in a separate
    // worker process. In order to have a group of spec files run in the same worker
    // process simply enclose them in an array within the specs array.
    //
    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),
    // then the current working directory is where your `package.json` resides, so `wdio`
    // will be called from there.
    //
    specs: ["./**/*.test.js"],
    // Patterns to exclude.
    exclude: [
        // 'path/to/excluded/files'
    ],
    //
    // ============
    // Capabilities
    // ============
    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same
    // time. Depending on the number of capabilities, WebdriverIO launches several test
    // sessions. Within your capabilities you can overwrite the spec and exclude options in
    // order to group specific specs to a specific capability.
    //
    // First, you can define how many instances should be started at the same time. Let's
    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have
    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec
    // files and you set maxInstances to 10, all spec files will get tested at the same time
    // and 30 processes will get spawned. The property handles how many capabilities
    // from the same test should run tests.
    //
    maxInstances: 10,
    //
    // If you have trouble getting all important capabilities together, check out the
    // Sauce Labs platform configurator - a great tool to configure your capabilities:
    // https://saucelabs.com/platform/platform-configurator
    //
    capabilities: [
        {
            // maxInstances can get overwritten per capability. So if you have an in-house Selenium
            // grid with only 5 firefox instances available you can make sure that not more than
            // 5 instances get started at a time.
            maxInstances: 5,
            //
            browserName: "chrome",
            "goog:chromeOptions": {
                args:
                    process.argv.indexOf("--headless") > -1
                        ? ["--headless=new", "--disable-search-engine-choice-screen"]
                        : process.argv.indexOf("--debug") > -1
                        ? ["window-size=1440,800", "--auto-open-devtools-for-tabs", "--disable-search-engine-choice-screen"]
                        : ["window-size=1440,800", "--disable-search-engine-choice-screen"]
            },
            acceptInsecureCerts: true
            // If outputDir is provided WebdriverIO can capture driver session logs
            // it is possible to configure which logTypes to include/exclude.
            // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs
            // excludeDriverLogs: ['bugreport', 'server'],
        }
    ],
    //
    // ===================
    // Test Configurations
    // ===================
    // Define all options that are relevant for the WebdriverIO instance here
    //
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    logLevel: "error",
    //
    // Set specific log levels per logger
    // loggers:
    // - webdriver, webdriverio
    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service
    // - @wdio/mocha-framework, @wdio/jasmine-framework
    // - @wdio/local-runner
    // - @wdio/sumologic-reporter
    // - @wdio/cli, @wdio/config, @wdio/utils
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    // logLevels: {
    //     webdriver: 'info',
    //     '@wdio/appium-service': 'info'
    // },
    //
    // If you only want to run your tests until a specific amount of tests have failed use
    // bail (default is 0 - don't bail, run all tests).
    bail: 0,
    //
    // Set a base URL in order to shorten url command calls. If your `url` parameter starts
    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
    // gets prepended directly.
    baseUrl: "http://localhost:8080/index.html",
    //
    // Default timeout for all waitFor* commands.
    waitforTimeout: 10000,
    //
    // Default timeout in milliseconds for request
    // if browser driver or grid doesn't send response
    connectionRetryTimeout: process.argv.indexOf("--debug") > -1 ? 1200000 : 120000,

    //
    // Default request retries count
    connectionRetryCount: 3,
    //
    // Test runner services
    // Services take over a specific job you don't want to take care of. They enhance
    // your test setup with almost no effort. Unlike plugins, they don't add new
    // commands. Instead, they hook themselves up into the test process.
    services: ["ui5"],

    // Framework you want to run your specs with.
    // The following are supported: Mocha, Jasmine, and Cucumber
    // see also: https://webdriver.io/docs/frameworks
    //
    // Make sure you have the wdio adapter package for the specific framework installed
    // before running any tests.
    framework: "mocha",
    //
    // The number of times to retry the entire specfile when it fails as a whole
    // specFileRetries: 1,
    //
    // Delay in seconds between the spec file retry attempts
    // specFileRetriesDelay: 0,
    //
    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue
    // specFileRetriesDeferred: false,
    //
    // Test reporter for stdout.
    // The only one supported by default is 'dot'
    // see also: https://webdriver.io/docs/dot-reporter
    reporters: ["spec"],

    //
    // Options to be passed to Mocha.
    // See the full list at http://mochajs.org/
    mochaOpts: {
        ui: "bdd",
        timeout: process.argv.indexOf("--debug") > -1 ? 600000 : 60000
    }
    //
    // =====
    // Hooks
    // =====
    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance
    // it and to build services around it. You can either apply a single function or an array of
    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got
    // resolved to continue.
    /**
     * Gets executed once before all workers get launched.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     */
    // onPrepare: function (config, capabilities) {
    // },
    /**
     * Gets executed before a worker process is spawned and can be used to initialise specific service
     * for that worker as well as modify runtime environments in an async fashion.
     * @param  {String} cid      capability id (e.g 0-0)
     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker
     * @param  {[type]} specs    specs to be run in the worker process
     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized
     * @param  {[type]} execArgv list of string arguments passed to the worker process
     */
    // onWorkerStart: function (cid, caps, specs, args, execArgv) {
    // },
    /**
     * Gets executed just after a worker process has exited.
     * @param  {String} cid      capability id (e.g 0-0)
     * @param  {Number} exitCode 0 - success, 1 - fail
     * @param  {[type]} specs    specs to be run in the worker process
     * @param  {Number} retries  number of retries used
     */
    // onWorkerEnd: function (cid, exitCode, specs, retries) {
    // },
    /**
     * Gets executed just before initialising the webdriver session and test framework. It allows you
     * to manipulate configurations depending on the capability or spec.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that are to be run
     * @param {String} cid worker id (e.g. 0-0)
     */
    // beforeSession: function (config, capabilities, specs, cid) {
    // },
    /**
     * Gets executed before test execution begins. At this point you can access to all global
     * variables like `browser`. It is the perfect place to define custom commands.
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs        List of spec file paths that are to be run
     * @param {Object}         browser      instance of created browser/device session
     */
    // before: function (capabilities, specs) {
    // },
    /**
     * Runs before a WebdriverIO command gets executed.
     * @param {String} commandName hook command name
     * @param {Array} args arguments that command would receive
     */
    // beforeCommand: function (commandName, args) {
    // },
    /**
     * Hook that gets executed before the suite starts
     * @param {Object} suite suite details
     */
    // beforeSuite: function (suite) {
    // },
    /**
     * Function to be executed before a test (in Mocha/Jasmine) starts.
     */
    // beforeTest: function (test, context) {
    // },
    /**
     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling
     * beforeEach in Mocha)
     */
    // beforeHook: function (test, context) {
    // },
    /**
     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling
     * afterEach in Mocha)
     */
    // afterHook: function (test, context, { error, result, duration, passed, retries }) {
    // },
    /**
     * Function to be executed after a test (in Mocha/Jasmine only)
     * @param {Object}  test             test object
     * @param {Object}  context          scope object the test was executed with
     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`
     * @param {Any}     result.result    return object of test function
     * @param {Number}  result.duration  duration of test
     * @param {Boolean} result.passed    true if test has passed, otherwise false
     * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`
     */
    // afterTest: function(test, context, { error, result, duration, passed, retries }) {
    // },

    /**
     * Hook that gets executed after the suite has ended
     * @param {Object} suite suite details
     */
    // afterSuite: function (suite) {
    // },
    /**
     * Runs after a WebdriverIO command gets executed
     * @param {String} commandName hook command name
     * @param {Array} args arguments that command would receive
     * @param {Number} result 0 - command success, 1 - command error
     * @param {Object} error error object if any
     */
    // afterCommand: function (commandName, args, result, error) {
    // },
    /**
     * Gets executed after all tests are done. You still have access to all global variables from
     * the test.
     * @param {Number} result 0 - test pass, 1 - test fail
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */
    // after: function (result, capabilities, specs) {
    // },
    /**
     * Gets executed right after terminating the webdriver session.
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */
    // afterSession: function (config, capabilities, specs) {
    // },
    /**
     * Gets executed after all workers got shut down and the process is about to exit. An error
     * thrown in the onComplete hook will result in the test run failing.
     * @param {Object} exitCode 0 - success, 1 - fail
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {<Object>} results object containing test results
     */
    // onComplete: function(exitCode, config, capabilities, results) {
    // },
    /**
     * Gets executed when a refresh happens.
     * @param {String} oldSessionId session ID of the old session
     * @param {String} newSessionId session ID of the new session
     */
    // onReload: function(oldSessionId, newSessionId) {
    // }
}
</file>

<file path="webapp/test/flpSandbox.html">
<!DOCTYPE HTML>
<html lang="en">
    <!-- Copyright (c) 2015 SAP AG, All Rights Reserved -->
    <head>
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{{appTitle}}</title>

        <!-- Bootstrap the unified shell in sandbox mode for standalone usage.

		 The renderer is specified in the global Unified Shell configuration object "sap-ushell-config".

		 The fiori2 renderer will render the shell header allowing, for instance,
		 testing of additional application setting buttons.

		 The navigation target resolution service is configured in a way that the empty URL hash is
		 resolved to our own application.

		 This example uses relative path references for the SAPUI5 resources and test-resources;
		 it might be necessary to adapt them depending on the target runtime platform.
		 The sandbox platform is restricted to development or demo use cases and must NOT be used
		 for productive scenarios.
	-->
        <script type="text/javascript">
		window["sap-ushell-config"] = {
			defaultRenderer: "fiori2",
                bootstrapPlugins: {
				"RuntimeAuthoringPlugin": {
					component: "sap.ushell.plugins.rta",
                        config: {
                            validateAppVersion: false
                        }
                    }
                },
                renderers: {
                    fiori2: {
                        componentData: {
			    config: {
				search: "hidden",
				enableSearch: false
			    }
			}
                    }
                },
                applications: {
				"app-tile": {
					title: "exam",
					description: "UI5 Application: exam",
					additionalInformation: "SAPUI5.Component=exam",
					applicationType: "URL",
					url: "../"
                    }
                }
            };
        </script>

        <script src="../test-resources/sap/ushell/bootstrap/sandbox.js" id="sap-ushell-bootstrap"></script>

        <!-- Bootstrap the UI5 core library -->
        <script
            id="sap-ui-bootstrap"
            src="../resources/sap-ui-core.js"
            data-sap-ui-libs="sap.f, sap.m, sap.ui.comp, sap.ui.core, sap.ui.generic.app, sap.ui.table, sap.ushell"
            data-sap-ui-async="true"
            data-sap-ui-preload="async"
            data-sap-ui-theme="sap_horizon"
            data-sap-ui-compatVersion="edge"
            data-sap-ui-language="en"
            data-sap-ui-resourceroots='{"exam": "../"}'
            data-sap-ui-frameOptions="allow"
        >
            // NON-SECURE setting for testing environment
        </script>
		<script id="locate-reuse-libs" src="./locate-reuse-libs.js"
				data-sap-ui-manifest-uri="../manifest.json">
		</script>
    </head>

    <!-- UI Content -->

    <body class="sapUiBody" id="content"></body>
</html>
</file>

<file path="webapp/test/integration/HelloJourney.js">
/* global QUnit */
sap.ui.define(["sap/ui/test/opaQunit", "./pages/Main"], function (opaTest) {
	"use strict";

	QUnit.module("Sample Hello Journey");

	opaTest("Should open the Hello dialog", function (Given, When, Then) {
		// Arrangements
		Given.iStartMyUIComponent({
			componentConfig: {
				name: "exam"
			}
		});

		// Actions
		When.onTheMainPage.iPressTheSayHelloButton();

		// Assertions
		Then.onTheMainPage.iShouldSeeTheHelloDialog();

		// Actions
		When.onTheMainPage.iPressTheOkButtonInTheDialog();

		// Assertions
		Then.onTheMainPage.iShouldNotSeeTheHelloDialog();

		// Cleanup
		Then.iTeardownMyApp();
	});

	opaTest("Should close the Hello dialog", function (Given, When, Then) {
		// Arrangements
		Given.iStartMyUIComponent({
			componentConfig: {
				name: "exam"
			}
		});

		// Actions
		When.onTheMainPage.iPressTheSayHelloButton();
		When.onTheMainPage.iPressTheOkButtonInTheDialog();

		// Assertions
		Then.onTheMainPage.iShouldNotSeeTheHelloDialog();

		// Cleanup
		Then.iTeardownMyApp();
	});
});
</file>

<file path="webapp/test/integration/opaTests.qunit.js">
sap.ui.define(["./HelloJourney"]);
</file>

<file path="webapp/test/integration/pages/Main.js">
sap.ui.define(["sap/ui/test/Opa5", "sap/ui/test/actions/Press"], function (Opa5, Press) {
	"use strict";

	Opa5.createPageObjects({
		onTheMainPage: {
			actions: {
				iPressTheSayHelloButton: function () {
					return this.waitFor({
						id: "helloButton",
						viewName: "exam.view.Main",
						actions: new Press(),
						errorMessage: "Did not find the 'Say Hello With Dialog' button on the App view"
					});
				},

				iPressTheOkButtonInTheDialog: function () {
					return this.waitFor({
						controlType: "sap.m.Button",
						searchOpenDialogs: true,
						viewName: "exam.view.Main",
						actions: new Press(),
						errorMessage: "Did not find the 'OK' button in the Dialog"
					});
				}
			},

			assertions: {
				iShouldSeeTheHelloDialog: function () {
					return this.waitFor({
						controlType: "sap.m.Dialog",
						success: function () {
							// we set the view busy, so we need to query the parent of the app
							Opa5.assert.ok(true, "The dialog is open");
						},
						errorMessage: "Did not find the dialog control"
					});
				},

				iShouldNotSeeTheHelloDialog: function () {
					return this.waitFor({
						controlType: "sap.m.App", // dummy, I just want a check function, where I can search the DOM. Probably there is a better way for a NEGATIVE test (NO dialog).
						check: function () {
							return document.querySelectorAll(".sapMDialog").length === 0;
						},
						success: function () {
							Opa5.assert.ok(true, "No dialog is open");
						}
					});
				}
			}
		}
	});
});
</file>

<file path="webapp/test/Test.qunit.html">
<!doctype html>
<html>
	<head>
		<meta charset="utf-8" />
		<script
			src="../resources/sap/ui/test/starter/runTest.js"
			data-sap-ui-resource-roots='{
			"test-resources.exam": "./"
		}'
		></script>
	</head>
	<body class="sapUiBody">
		<div id="qunit"></div>
		<div id="qunit-fixture"></div>
	</body>
</html>
</file>

<file path="webapp/test/testsuite.qunit.html">
<!doctype html>
<html>
	<head>
		<meta http-equiv="Cache-control" content="no-cache, no-store, must-revalidate" />
		<meta http-equiv="Pragma" content="no-cache" />
		<meta http-equiv="expires" content="0" />
		<meta charset="utf-8" />
		<title>QUnit test suite for the UI5 Application: exam</title>
		<script
			src="../resources/sap/ui/test/starter/createSuite.js"
			data-sap-ui-testsuite="test-resources/exam/testsuite.qunit"
			data-sap-ui-resource-roots='{
				"test-resources.exam": "./"
			}'
		></script>
	</head>
	<body></body>
</html>
</file>

<file path="webapp/test/testsuite.qunit.js">
sap.ui.define(function () {
	"use strict";

	return {
		name: "QUnit test suite for the UI5 Application: exam",
		defaults: {
			page: "ui5://test-resources/exam/Test.qunit.html?testsuite={suite}&test={name}",
			qunit: {
				version: 2
			},
			sinon: {
				version: 1
			},
			ui5: {
				language: "EN",
				theme: "sap_horizon"
			},
			coverage: {
				only: "exam/",
				never: "test-resources/exam/"
			},
			loader: {
				paths: {
					"exam": "../"
				}
			}
		},
		tests: {
			"unit/unitTests": {
				title: "Unit tests for exam"
			},
			"integration/opaTests": {
				title: "Integration tests for exam"
			}
		}
	};
});
</file>

<file path="webapp/test/unit/uniTests.qunit.html">
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Unit Tests</title>
    <script
      src="../../resources/sap-ui-core.js"
      id="sap-ui-bootstrap"
      data-sap-ui-theme="sap_fiori_3"
      data-sap-ui-libs="sap.m"
      data-sap-ui-resourceroots='{
        "exam": "../../",
        "exam.test": "./"
      }'
      data-sap-ui-async="true"
      data-sap-ui-onInit="module:exam/test/unit/unitTests.qunit"
    ></script>
  </head>
  <body class="sapUiBody">
    <div id="qunit"></div>
    <div id="qunit-fixture"></div>
  </body>
</html>
</file>

<file path="webapp/view/Main.view.xml.backup">
<mvc:View
  controllerName="exam.controller.Main"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns="sap.m"
  xmlns:core="sap.ui.core"
>
  <Page
    showHeader="false"
    class="modern-login-page"
    enableScrolling="false"
  >
    <content>
      <!-- Enhanced background with more visual elements -->
      <VBox class="login-background">
        <!-- Animated background elements -->
        <HBox class="floating-shapes">
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-1" />
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-2" />
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-3" />
          <core:Icon src="sap-icon://shield" class="floating-shape shape-4" />
          <core:Icon src="sap-icon://user" class="floating-shape shape-5" />
          <core:Icon src="sap-icon://settings" class="floating-shape shape-6" />
        </HBox>
        
        <!-- Decorative grid pattern -->
        <VBox class="grid-pattern">
          <HBox class="grid-row">
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
          </HBox>
          <HBox class="grid-row">
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
          </HBox>
        </VBox>
        
        <!-- Main content container -->
        <HBox class="main-content-container">
          <!-- Left side - Branding and info -->
          <VBox class="branding-section">
            <VBox class="brand-content">
              <core:Icon src="sap-icon://shield" class="brand-icon" />
              <Title text="Secure Examination System" level="H1" class="brand-title" />
              <Text text="Professional assessment platform for modern organizations" class="brand-subtitle" />
              
              <!-- Feature highlights -->
              <VBox class="feature-highlights">
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://shield" class="feature-icon" />
                  <Text text="Secure & Encrypted" class="feature-text" />
                </HBox>
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://user" class="feature-icon" />
                  <Text text="Multi-Role Access" class="feature-text" />
                </HBox>
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://analytics" class="feature-icon" />
                  <Text text="Real-time Analytics" class="feature-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
          
          <!-- Right side - Login form -->
          <VBox class="login-section">
            <VBox class="login-container-modern">
              <!-- Header section -->
              <VBox class="login-header" alignItems="Center">
                <core:Icon src="sap-icon://shield" class="app-icon" />
                <Title text="Welcome Back" level="H1" class="modern-login-title" />
                <Text text="Choose your role to continue" class="modern-login-subtitle" />
              </VBox>

              <!-- Role selection section -->
              <VBox class="role-selection-container" alignItems="Center">
                <HBox class="avatar-carousel-modern" alignItems="Center" justifyContent="Center">
                  <Button 
                    icon="sap-icon://nav-back" 
                    press="onPreviousAvatar" 
                    class="modern-nav-arrow" 
                    tooltip="Previous Role"
                  />

                  <VBox alignItems="Center" class="avatar-section-modern">
                    <VBox class="avatar-container">
                      <Image src="{/selected/avatar}" class="modern-avatar-image" />
                      <VBox class="avatar-overlay">
                        <core:Icon src="sap-icon://user" class="avatar-icon" />
                      </VBox>
                    </VBox>
                    <Text text="{/selected/role}" class="modern-role-label" />
                    <Text text="Click to select" class="role-hint" />
                  </VBox>

                  <Button 
                    icon="sap-icon://nav-forward" 
                    press="onNextAvatar" 
                    class="modern-nav-arrow" 
                    tooltip="Next Role"
                  />
                </HBox>

                <!-- Role indicators -->
                <HBox class="role-indicators" justifyContent="Center">
                  <core:Icon 
                    src="{= ${/currentIndex} === 0 ? 'sap-icon://circle-task' : 'sap-icon://circle-task-2'}" 
                    class="role-indicator" 
                  />
                  <core:Icon 
                    src="{= ${/currentIndex} === 1 ? 'sap-icon://circle-task' : 'sap-icon://circle-task-2'}" 
                    class="role-indicator" 
                  />
                </HBox>
              </VBox>

              <!-- Action section -->
              <VBox class="login-actions" alignItems="Center">
                <Button 
                  text="Continue" 
                  press="onLoginContinue" 
                  class="modern-continue-btn" 
                  icon="sap-icon://arrow-right"
                  iconFirst="false"
                />
                
                <!-- Additional info -->
                <HBox class="login-info" justifyContent="Center">
                  <core:Icon src="sap-icon://shield" class="info-icon" />
                  <Text text="Secure & Encrypted" class="info-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
        </HBox>
      </VBox>
    </content>
  </Page>
</mvc:View>
</file>

<file path="webapp/view/QuestionNavButton.fragment.xml">
<core:FragmentDefinition xmlns="sap.m" xmlns:core="sap.ui.core">
  <Button 
    text="{= ${questions>/currentIndex} + 1}"
    width="3rem"
    type="{= ${questions>/questions/${questions>/currentIndex}/status} === 'answered' ? 'Accept' : 
           ${questions>/questions/${questions>/currentIndex}/status} === 'markedForReview' ? 'Attention' : 'Default'}"
    press="onNavigateToQuestion"
    data:questionIndex="${questions>/currentIndex}"/>
</core:FragmentDefinition>
</file>

<file path="webapp/view/ResetPassword.view.xml">
<mvc:View
  controllerName="exam.controller.ResetPassword"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns="sap.m">
  <VBox
    alignItems="Center"
    justifyContent="Center"
    class="sapUiSmallMargin sapUiContentPadding"
    width="100%">
    <Title text="Reset Your Password" level="H2" />
    <Label text="New Password" labelFor="newPasswordInput" />
    <Input id="newPasswordInput" type="Password" width="300px" />
    <Label text="Confirm New Password" labelFor="confirmPasswordInput" />
    <Input id="confirmPasswordInput" type="Password" width="300px" />
    <Button
      text="Reset Password"
      type="Emphasized"
      press="onResetPassword"
      class="sapUiSmallMarginTop" />
  </VBox>
</mvc:View>
</file>

<file path="webapp/view/SuperAdminResetPassword.view.xml">
<mvc:View xmlns:mvc="sap.ui.core.mvc" xmlns="sap.m" controllerName="exam.controller.SuperAdminResetPassword">
    <VBox class="sapUiSmallMargin">
        <Input placeholder="Enter your email" value="{/email}" />
        <Button text="Send OTP" press="onSendOtp" />

        <Input placeholder="Enter OTP" value="{/otp}" />
        <Button text="Verify OTP" press="onVerifyOtp" />

        <Input placeholder="Enter new password" type="Password" value="{/newPassword}" />
        <Button text="Reset Password" press="onResetPassword" />
    </VBox>
</mvc:View>
</file>

<file path=".gitignore">
# build results
dist
coverage

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/

.DS_Store
.env
tmp/

node_modules/
dist/
.scp/
.env
Makefile*.mta
mta_archives
mta-*
resources
archive.zip
.*_mta_build_tmp
</file>

<file path="eslint.config.js">
const globals = require("globals");
const js = require("@eslint/js");
const jsdoc = require("eslint-plugin-jsdoc");

module.exports = [
	js.configs.recommended,
	jsdoc.configs["flat/recommended"],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node,
				$: "readonly", // jQuery
				sap: "readonly"
			},
			ecmaVersion: 2023,
			sourceType: "script",
			
		},
		rules: {
			"brace-style": [
				2,
				"1tbs",
				{
					allowSingleLine: true
				}
			],
			"consistent-this": 2,
			"no-div-regex": 2,
			"no-floating-decimal": 2,
			"no-self-compare": 2,
			"no-mixed-spaces-and-tabs": [2, true],
			"no-nested-ternary": 2,
			radix: 2,
			"keyword-spacing": 2,
			"space-unary-ops": 2,
			"wrap-iife": [2, "any"],
			camelcase: 1,
			"consistent-return": 1,
			"max-nested-callbacks": [1, 3],
			"new-cap": 1,
			"no-extra-boolean-cast": 1,
			"no-lonely-if": 1,
			"no-new": 1,
			"no-new-wrappers": 1,
			"no-redeclare": 1,
			"no-unused-expressions": 1,
			"no-use-before-define": [1, "nofunc"],
			"no-warning-comments": 1,
			strict: 1,
			"default-case": 1,
			"dot-notation": 0,
			"eol-last": 0,
			eqeqeq: 0,
			"no-trailing-spaces": 0,
			"no-underscore-dangle": 0,
			quotes: 0,
			"key-spacing": 0,
			"comma-spacing": 0,
			"no-multi-spaces": 0,
			"no-shadow": 0,
			"no-irregular-whitespace": 0,
			"no-var": 2,
			"no-const-assign": 2,
			"prefer-const": 2
		}
	},
	{
		ignores: ["eslint.config.js", "webapp/test/e2e/**"]
	}
];
</file>

<file path="routes/user.js">
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

// Employee-initiated password change
router.post('/change-password', userController.changePassword);

// Forgot password endpoints
router.post('/request-password-reset', userController.requestPasswordReset);
router.post('/reset-password', userController.resetPassword);

module.exports = router;
</file>

<file path="ui5.yaml">
specVersion: "3.1"
metadata:
  name: exam
type: application
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://ui5.sap.com
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
        delay: 300
    - name: fiori-tools-preview
      afterMiddleware: fiori-tools-appreload
      configuration:
        component: exam
        ui5Theme: sap_horizon
</file>

<file path="webapp/controller/App.controller.js">
sap.ui.define(["./BaseController"], function (BaseController) {
	"use strict";

	return BaseController.extend("exam.controller.App", {
		onInit: function () {
			// apply content density mode to root view
			this.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());
		},
		sayHello: function () {
	return "Hello, World!";
}

	});
});
</file>

<file path="webapp/controller/BaseController.js">
sap.ui.define(["sap/ui/core/mvc/Controller", "sap/ui/core/UIComponent", "sap/ui/core/routing/History"], function (Controller, UIComponent, History) {
	"use strict";

	return Controller.extend("exam.controller.BaseController", {
		/**
		 * Convenience method for accessing the component of the controller's view.
		 * @returns {sap.ui.core.Component} The component of the controller's view
		 */
		getOwnerComponent: function () {
			return Controller.prototype.getOwnerComponent.call(this);
		},

		/**
		 * Convenience method to get the components' router instance.
		 * @returns {sap.m.routing.Router} The router instance
		 */
		getRouter: function () {
			return UIComponent.getRouterFor(this);
		},

		/**
		 * Convenience method for getting the i18n resource bundle of the component.
		 * @returns {Promise<sap.base.i18n.ResourceBundle>} The i18n resource bundle of the component
		 */
		getResourceBundle: function () {
			const oModel = this.getOwnerComponent().getModel("i18n");
			return oModel.getResourceBundle();
		},

		/**
		 * Convenience method for getting the view model by name in every controller of the application.
		 * @param {string} [sName] The model name
		 * @returns {sap.ui.model.Model} The model instance
		 */
		getModel: function (sName) {
			return this.getView().getModel(sName);
		},

		/**
		 * Convenience method for setting the view model in every controller of the application.
		 * @param {sap.ui.model.Model} oModel The model instance
		 * @param {string} [sName] The model name
		 * @returns {sap.ui.core.mvc.Controller} The current base controller instance
		 */
		setModel: function (oModel, sName) {
			this.getView().setModel(oModel, sName);
			return this;
		},

		/**
		 * Convenience method for triggering the navigation to a specific target.
		 * @public
		 * @param {string} sName Target name
		 * @param {object} [oParameters] Navigation parameters
		 * @param {boolean} [bReplace] Defines if the hash should be replaced (no browser history entry) or set (browser history entry)
		 */
		navTo: function (sName, oParameters, bReplace) {
			this.getRouter().navTo(sName, oParameters, undefined, bReplace);
		},

		/**
		 * Convenience event handler for navigating back.
		 * It there is a history entry we go one step back in the browser history
		 * If not, it will replace the current entry of the browser history with the main route.
		 */
		onNavBack: function () {
			const sPreviousHash = History.getInstance().getPreviousHash();
			if (sPreviousHash !== undefined) {
				window.history.go(-1);
			} else {
				this.getRouter().navTo("main", {}, undefined, true);
			}
		},
		getCurrentUser: async function () {
  try {
    const res = await fetch("http://localhost:4000/api/auth/me", {
      headers: {
        Authorization: "Bearer " + localStorage.getItem("jwt")
      }
    });
    if (!res.ok) throw new Error("Unauthorized");
    return await res.json();
  } catch (err) {
    sap.m.MessageBox.error("Session expired or unauthorized.");
    this.getRouter().navTo("main"); // redirect to login
    throw err;
  }
}

	});
});
</file>

<file path="webapp/controller/SuperAdminResetPassword.controller.js">
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/m/MessageToast",
    "sap/m/MessageBox"
], function(Controller, MessageToast, MessageBox) {
    "use strict";

    return Controller.extend("exam.controller.SuperAdminResetPassword", {
        onInit: function() {
    const oModel = new sap.ui.model.json.JSONModel({
        email: "",
        otp: "",
        newPassword: "",
        otpToken: ""
    });
    this.getView().setModel(oModel);

    // Get token from URL query parameter 'token'
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get("token");
    if (token) {
        this.getView().getModel().setProperty("/otpToken", token);
    }
},


        _onRouteMatched: function(oEvent) {
            const token = oEvent.getParameter("arguments").token;
            this.getView().getModel().setProperty("/otpToken", token);
        },

        onSendOtp: function() {
            const data = this.getView().getModel().getData();
            fetch("http://localhost:4000/api/superadmin/request-otp", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email: data.email })
            })
            .then(res => res.json())
            .then(res => {
                if (res.otpToken) {
                    data.otpToken = res.otpToken;
                    this.getView().getModel().refresh();
                }
                if (res.message && res.message.toLowerCase().includes("sent")) {
                    MessageToast.show(res.message);
                } else if (!res.otpToken) {
                    MessageBox.error(res.message || "Failed to send OTP");
                }
            })
            .catch(err => {
                console.error(err);
                MessageBox.error("Something went wrong. Please try again.");
            });
        },

        onVerifyOtp: function() {
            const data = this.getView().getModel().getData();
            fetch("http://localhost:4000/api/superadmin/verify-otp", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ otpToken: data.otpToken, otp: data.otp })
            })
            .then(res => res.json())
            .then(res => {
                if (res.message.includes("successfully")) {
                    MessageToast.show("OTP Verified, you can now reset password");
                } else {
                    MessageBox.error(res.message);
                }
            });
        },

        onResetPassword: function() {
            const data = this.getView().getModel().getData();
            if (!data.newPassword) {
                return MessageBox.error("Please enter a new password.");
            }
            fetch("http://localhost:4000/api/superadmin/reset-password", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ token: data.otpToken, password: data.newPassword })
            })
            .then(res => res.json())
            .then(res => {
                if (res.message && res.message.toLowerCase().includes("success")) {
                    MessageToast.show("Password reset successfully. Please login.");
                    this.getRouter().navTo("login");  // Redirect to login
                } else {
                    MessageBox.error(res.message || "Failed to reset password");
                }
            })
            .catch(err => {
                console.error(err);
                MessageBox.error("Something went wrong. Please try again.");
            });
        },

        getRouter: function() {
            return sap.ui.core.UIComponent.getRouterFor(this);
        }
    });
});
</file>

<file path="webapp/model/ExamService.js">
/*sap.ui.define(["exam/model/AuthService"], function (AuthService) {
  "use strict";
  const BASE_URL = "http://localhost:4000/api";

  function getAuthHeaders() {
    const token = AuthService.getToken();
    return token ? { "Authorization": "Bearer " + token } : {};
  }

  return {
    createExam: function(examData) {
      return fetch(BASE_URL + "/exam/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...getAuthHeaders()
        },
        body: JSON.stringify(examData)
      }).then(res => res.json());
    },
    addQuestion: function(questionData) {
      return fetch(BASE_URL + "/exam/add-question", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...getAuthHeaders()
        },
        body: JSON.stringify(questionData)
      }).then(res => res.json());
    },
    assignExam: function(assignData) {
      return fetch(BASE_URL + "/exam/assign", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...getAuthHeaders()
        },
        body: JSON.stringify(assignData)
      }).then(res => res.json());
    },
    getAssignedExams: function(userId) {
  return fetch(BASE_URL + "/exam/assigned/" + userId, {
    method: "GET",
    headers: {
      ...getAuthHeaders()
    }
  }).then(res => res.json());
},
 getExamQuestions: function(examId) {
  return fetch(BASE_URL + "/exam/" + examId + "/questions", {
    method: "GET",
    headers: {
      ...getAuthHeaders()
    }
  }).then(res => res.json());
},
submitExamAnswers: function(examId, userId, answers) {
  return fetch(BASE_URL + "/exam/" + examId + "/submit", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...getAuthHeaders()
    },
    body: JSON.stringify({ user_id: userId, answers: answers })
  }).then(res => res.json());
},
getUserExamResult: function(examId, userId) {
  return fetch(BASE_URL + "/exam/" + examId + "/result/" + userId, {
    method: "GET",
    headers: {
      ...getAuthHeaders()
    }
  }).then(res => res.json());
},
getAllExamResults: function(examId) {
  return fetch(BASE_URL + "/exam/" + examId + "/results", {
    method: "GET",
    headers: {
      ...getAuthHeaders()
    }
  }).then(res => res.json());
},
  };
});*/
sap.ui.define([], function () {
  "use strict";
  const BASE_URL = "http://localhost:4000/api";

  return {
    createExam: function(examData) {
      return fetch(BASE_URL + "/exams/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(examData),
        credentials: "include"
      }).then(res => res.json());
    },
    addQuestion: function(questionData) {
      return fetch(BASE_URL + "/exams/add-question", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(questionData),
        credentials: "include"
      }).then(res => res.json());
    },
    /*assignExam: function(assignData) {
      return fetch(BASE_URL + "/exam/assign", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(assignData),
        credentials: "include"
      }).then(res => res.json());
    }*/
   assignExam: function(assignData) {
  return fetch(BASE_URL + "/exams/assign", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(assignData),
    credentials: "include"
  }).then(async res => {
    const data = await res.json();
    if (!res.ok) {
      // Attach status for further handling if needed
      throw data;
    }
    return data;
  });
},
    getAssignedExams: function(userId) {
      return fetch(BASE_URL + "/exams/assigned/" + userId, {
        method: "GET",
        credentials: "include"
      }).then(res => res.json());
    },
    getExamQuestions: function(examId) {
      return fetch(BASE_URL + "/exams/" + examId + "/questions", {
        method: "GET",
        credentials: "include"
      }).then(res => res.json());
    },
    submitExamAnswers: function(examId, userId, answers) {
      return fetch(BASE_URL + "/exams/" + examId + "/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ user_id: userId, answers: answers }),
        credentials: "include"
      }).then(res => res.json());
    },
    getUserExamResult: function(examId, userId) {
      return fetch(BASE_URL + "/exams/" + examId + "/result/" + userId, {
        method: "GET",
        credentials: "include"
      }).then(res => res.json());
    },
    getAllExamResults: function(examId) {
      return fetch(BASE_URL + "/exams/" + examId + "/results", {
        method: "GET",
        credentials: "include"
      }).then(res => res.json());
    }
  };
});
</file>

<file path="webapp/model/PermissionChecker.js">
sap.ui.define([
  "exam/model/PermissionService"
], function (PermissionService) {
  "use strict";

  function extractNames(permissions) {
    return permissions.map(function (p) { return (typeof p === "string" ? p : p.name) || ""; })
      .map(function (n) { return String(n).toLowerCase(); });
  }

  return {
    hasPermission: function(userId, permissionName) {
      return PermissionService.getUserPermissions(userId)
        .then(function(permissions) {
          const names = extractNames(permissions);
          return names.includes(String(permissionName).toLowerCase());
        })
        .catch(function(err) {
          console.error("Permission check failed:", err);
          return false;
        });
    },

    hasAllPermissions: function(userId, permissionNames) {
      return PermissionService.getUserPermissions(userId)
        .then(function(permissions) {
          const names = extractNames(permissions);
          return permissionNames.map(function(n){return String(n).toLowerCase();}).every(function(name){ return names.includes(name); });
        })
        .catch(function(err) {
          console.error("Permission check failed:", err);
          return false;
        });
    },

    hasAnyPermission: function(userId, permissionNames) {
      return PermissionService.getUserPermissions(userId)
        .then(function(permissions) {
          const names = extractNames(permissions);
          return permissionNames.map(function(n){return String(n).toLowerCase();}).some(function(name){ return names.includes(name); });
        })
        .catch(function(err) {
          console.error("Permission check failed:", err);
          return false;
        });
    }
  };
});
</file>

<file path="webapp/model/PermissionService.js">
sap.ui.define([], function () {
  "use strict";
  const BASE_URL = "http://localhost:4000/api";

  return {
    getAllPermissions: function() {
      return fetch(BASE_URL + "/permissions", {
        method: "GET",
        credentials: "include"
      }).then(res => {
        if (!res.ok) {
          const err = new Error("Failed to fetch permissions");
          err.status = res.status;
          throw err;
        }
        return res.json();
      }).then(json => json.permissions || json.data || json);
    },

    getAllUsersWithPermissions: function() {
      return fetch(BASE_URL + "/permissions/users", {
        method: "GET",
        credentials: "include"
      }).then(res => {
        if (!res.ok) {
          const err = new Error("Failed to fetch users");
          err.status = res.status;
          throw err;
        }
        return res.json();
      }).then(json => json.users || json.data || json);
    },

    getUserPermissions: function(userId) {
      return fetch(BASE_URL + "/permissions/users/" + userId, {
        method: "GET",
        credentials: "include"
      }).then(res => {
        if (!res.ok) {
          const err = new Error("Failed to fetch user permissions");
          err.status = res.status;
          throw err;
        }
        return res.json();
      }).then(json => json.permissions || json.data || json);
    },

    assignPermission: function(userId, permissionId) {
      return fetch(BASE_URL + "/permissions/assign", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ userId, permissionId }),
        credentials: "include"
      }).then(res => {
        if (!res.ok) {
          const err = new Error("Failed to assign permission");
          err.status = res.status;
          throw err;
        }
        return res.json();
      });
    },

    removePermission: function(userId, permissionId) {
      return fetch(BASE_URL + "/permissions/remove", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ userId, permissionId }),
        credentials: "include"
      }).then(res => {
        if (!res.ok) {
          const err = new Error("Failed to remove permission");
          err.status = res.status;
          throw err;
        }
        return res.json();
      });
    }
  };
});
</file>

<file path="webapp/test/locate-reuse-libs.js">
(function (sap) {
    const fioriToolsGetManifestLibs = function (manifestPath) {
        const url = manifestPath;
        let result = "";
        // SAPUI5 delivered namespaces from https://ui5.sap.com/#/api/sap
        const ui5Libs = [
            "sap.apf",
            "sap.base",
            "sap.chart",
            "sap.collaboration",
            "sap.f",
            "sap.fe",
            "sap.fileviewer",
            "sap.gantt",
            "sap.landvisz",
            "sap.m",
            "sap.ndc",
            "sap.ovp",
            "sap.rules",
            "sap.suite",
            "sap.tnt",
            "sap.ui",
            "sap.uiext",
            "sap.ushell",
            "sap.uxap",
            "sap.viz",
            "sap.webanalytics",
            "sap.zen"
        ];
        /**
         *
         * @param libOrComp
         * @param libOrCompKeysString
         */
        function getKeys(libOrComp, libOrCompKeysString) {
            let libOrCompKeysStringTmp = libOrCompKeysString;
            Object.keys(libOrComp).forEach(function (libOrCompKey) {
                // ignore libs or Components that start with SAPUI5 delivered namespaces
                if (!ui5Libs.some(function (substring) { return libOrCompKey === substring || libOrCompKey.startsWith(substring + "."); })) {
                    if (libOrCompKeysStringTmp.length > 0) {
                        libOrCompKeysStringTmp = libOrCompKeysStringTmp + "," + libOrCompKey;
                    } else {
                        libOrCompKeysStringTmp = libOrCompKey;
                    }
                }
            });
            return libOrCompKeysStringTmp;
        };
        /**
         *
         * @param compUsages
         * @param libOrCompKeysString
         */
        function getComponentUsageNames(compUsages, libOrCompKeysString) {
            let libOrCompKeysStringTmp = libOrCompKeysString;
            const compNames = Object.keys(compUsages).map(function (compUsageKey) {
                return compUsages[compUsageKey].name;
            });
            compNames.forEach(function (compName) {
                // ignore libs or Components that start with SAPUI5 delivered namespaces
                if (!ui5Libs.some(function (substring) { return compName === substring || compName.startsWith(substring + "."); })) {
                    if (libOrCompKeysStringTmp.length > 0) {
                        libOrCompKeysStringTmp = libOrCompKeysStringTmp + "," + compName;
                    } else {
                        libOrCompKeysStringTmp = compName;
                    }
                }
            });
            return libOrCompKeysStringTmp;
        };
        return new Promise(function (resolve, reject) {
            $.ajax(url)
                .done(function (manifest) {
                    if (manifest) {
                        if (
                            manifest["sap.ui5"] &&
                            manifest["sap.ui5"].dependencies
                        ) {
                            if (manifest["sap.ui5"].dependencies.libs) {
                                result = getKeys(manifest["sap.ui5"].dependencies.libs, result);
                            }
                            if (manifest["sap.ui5"].dependencies.components) {
                                result = getKeys(manifest["sap.ui5"].dependencies.components, result);
                            }
                        }
                        if (
                            manifest["sap.ui5"] &&
                            manifest["sap.ui5"].componentUsages
                        ) {
                            result = getComponentUsageNames(manifest["sap.ui5"].componentUsages, result);
                        }
                    }
                    resolve(result);
                })
                .fail(function () {
                    reject(new Error("Could not fetch manifest at '" + manifestPath));
                });
        });
    };
    /**
     *
     * @param dataFromAppIndex
     */
    function registerModules(dataFromAppIndex) {
        Object.keys(dataFromAppIndex).forEach(function (moduleDefinitionKey) {
            const moduleDefinition = dataFromAppIndex[moduleDefinitionKey];
            if (moduleDefinition && moduleDefinition.dependencies) {
                moduleDefinition.dependencies.forEach(function (dependency) {
                    if (dependency.url && dependency.url.length > 0 && dependency.type === "UI5LIB") {
                        sap.ui.require(["sap/base/Log"], function (Log) {
                            Log.info("Registering Library " +
                                encodeURI(dependency.componentId) +
                                " from server " +
                                encodeURI(dependency.url));
                        });
                        const compId = dependency.componentId.replace(/\./g, "/");
                        const config = {
                            paths: {
                            }
                        };
                        config.paths[compId] = dependency.url;
                        sap.ui.loader.config(config);
                    }
                });
            }
        });
    };
    /**
     * Registers the module paths for dependencies of the given component.
     * @param {string} manifestPath The the path to the app manifest path
     * for which the dependencies should be registered.
     * @returns {Promise} A promise which is resolved when the ajax request for
     * the app-index was successful and the module paths were registered.
     */
    sap.registerComponentDependencyPaths = function (manifestPath) {

        return fioriToolsGetManifestLibs(manifestPath).then(function (libs) {
            if (libs && libs.length > 0) {
                let url = "/sap/bc/ui2/app_index/ui5_app_info?id=" + libs;
                let sapClient = "";

                return new Promise(
                    function (resolve) {
                        sap.ui.require(["sap/base/util/UriParameters"], function (UriParameters) {
                            sapClient = UriParameters.fromQuery(window.location.search).get("sap-client");
                            if (sapClient && sapClient.length === 3) {
                                url = url + "&sap-client=" + sapClient;
                            }
                            resolve(url);
                        });
                    }).then(function (url2) {
                        return $.ajax(url2).done(function (data) {
                            if (data) {
                                registerModules(data);
                            }
                        });
                    });
            } else {
                return undefined;
            }
        });
    };
})(sap);

/**
 *
 */
function registerSAPFonts() {  
    sap.ui.require(["sap/ui/core/IconPool"], function (IconPool) {  
    //Fiori Theme font family and URI
    const fioriTheme = {
        fontFamily: "SAP-icons-TNT",
        fontURI: sap.ui.require.toUrl("sap/tnt/themes/base/fonts/")
    };
    //Registering to the icon pool
    IconPool.registerFont(fioriTheme);
    //SAP Business Suite Theme font family and URI
    const bSuiteTheme = {
        fontFamily: "BusinessSuiteInAppSymbols",
        fontURI: sap.ui.require.toUrl("sap/ushell/themes/base/fonts/")
    };
    //Registering to the icon pool
    IconPool.registerFont(bSuiteTheme);
    });
};

//eslint-disable sap-browser-api-warning, sap-no-dom-access*/
let currentScript = document.getElementById("locate-reuse-libs");
if (!currentScript) {
    currentScript = document.currentScript;
}
const manifestUri = currentScript.getAttribute("data-sap-ui-manifest-uri");
const componentName = currentScript.getAttribute("data-sap-ui-componentName");
const useMockserver = currentScript.getAttribute("data-sap-ui-use-mockserver");

sap.registerComponentDependencyPaths(manifestUri)
    .catch(function (error) {
        sap.ui.require(["sap/base/Log"], function (Log) {
            Log.error(error);
        });
    })
    .finally(function () {

        // setting the app title with internationalization 
        sap.ui.getCore().attachInit(function () {
            const sLocale = sap.ui.getCore().getConfiguration().getLanguage();
            sap.ui.require(["sap/base/i18n/ResourceBundle"], function (ResourceBundle) {
                const oResourceBundle = ResourceBundle.create({
                    url: "i18n/i18n.properties",
                    locale: sLocale
                });
                document.title = oResourceBundle.getText("appTitle");
            });
        });

        if (componentName && componentName.length > 0) {
            if (useMockserver && useMockserver === "true") {
                sap.ui.getCore().attachInit(function () {
                    registerSAPFonts();
                    sap.ui.require([componentName.replace(/\./g, "/") + "/localService/mockserver"], function (server) {
                        // set up test service for local testing
                        server.init();
                        // initialize the ushell sandbox component
                        sap.ushell.Container.createRenderer().placeAt("content");
                    });
                });
            } else {
                // Requiring the ComponentSupport module automatically executes the component initialisation for all declaratively defined components
                sap.ui.require(["sap/ui/core/ComponentSupport"]);

                // setting the app title with the i18n text 
                sap.ui.getCore().attachInit(function () {
                    registerSAPFonts();
                    const sLocale = sap.ui.getCore().getConfiguration().getLanguage();
                    sap.ui.require(["sap/base/i18n/ResourceBundle"], function (ResourceBundle) {
                        const oResourceBundle = ResourceBundle.create({
                            url: "i18n/i18n.properties",
                            locale: sLocale
                        });
                        document.title = oResourceBundle.getText("appTitle");
                    });
                });
            }
        } else {
            sap.ui.getCore().attachInit(function () {
                registerSAPFonts();
                try {
                    // initialize the ushell sandbox component in ui5 v2
                    sap.ushell.Container.createRenderer(true).then(function (component) {
                        component.placeAt("content");
                    });
                } catch {
                    // support older versions of ui5 
                    sap.ushell.Container.createRenderer().placeAt("content");
                }
            });
        }
    });
</file>

<file path="webapp/view/AnnouncementDialog.fragment.xml">
<core:FragmentDefinition xmlns="sap.m" xmlns:core="sap.ui.core">
  <Dialog
    id="announcementDialog"
    title="Announcements"
    draggable="true"
    resizable="true"
    class="sapUiResponsivePadding--header sapUiResponsivePadding--content">

    <List items="{announcementModel>/announcements}">
      <StandardListItem
        title="{announcementModel>title}"
        description="{announcementModel>message}"
        type="Active"
        icon="{= ${announcementModel>read} ? 'sap-icon://accept' : 'sap-icon://unfavorite' }"
        iconColor="{= ${announcementModel>read} ? 'Positive' : 'Negative' }"
        press=".onMarkAnnouncementRead" />
    </List>

    <beginButton>
      <Button text="Close" press=".onCloseAnnouncementDialog" />
    </beginButton>

  </Dialog>
</core:FragmentDefinition>
</file>

<file path=".github/workflows/frontend-ci.yml">
name: Frontend CI/CD

on:
  push:
    branches: [ master ]  
  workflow_dispatch:      # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Lint Code
        run: npm run lint

      - name: Run Tests
        run: npm run test

      - name: Build Project
        run: npm run build

  deploy:
    needs: build-and-test   # Only run if build+test passed
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Manual trigger only
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Deploy to Server (update this step)
        run: |
          echo "✅ Replace this with your deployment script"
</file>

<file path="karma.conf.js">
// karma.conf.js
module.exports = function (config) {
  "use strict";

  config.set({
    frameworks: ["ui5"],

    ui5: {
      type: "application",
      paths: {
        webapp: "webapp" // adjust if your source folder is different
      }
    },


    browsers: ["ChromeHeadless"],

    // Timeouts (optional but helpful in CI)
    browserNoActivityTimeout: 120000,
    browserDisconnectTimeout: 10000,
    browserDisconnectTolerance: 2,
    captureTimeout: 120000,

    customLaunchers: {
      ChromeHeadlessCI: {
        base: "ChromeHeadless",
        flags: [
          "--no-sandbox",
          "--disable-gpu",
          "--disable-dev-shm-usage",
          "--disable-software-rasterizer"
        ]
      }
    },

    singleRun: true
  });
};
</file>

<file path="package.json">
{
  "name": "exam",
  "version": "0.0.1",
  "description": "UI5 Application: exam",
  "author": "Anohita",
  "license": "Apache-2.0",
  "scripts": {
    "clean": "rimraf dist coverage",
    "build:opt": "ui5 build self-contained --clean-dest --all",
    "start-cdn": "ui5 serve --port 8080 -o index-cdn.html",
    "start:dist": "npm start -- --config ui5-dist.yaml",
    "start:dist-cdn": "npm run start-cdn -- --config ui5-dist.yaml",
    "lint": "eslint webapp",
    "lint:fix": "eslint . --fix",
    "karma": "karma start",
    "karma-ci": "karma start karma-ci.conf.js",
    "karma-ci-cov": "karma start karma-ci-cov.conf.js",
    "test": "npm run lint && npm run karma-ci-cov",
    "wdi5": "wdio run ./webapp/test/e2e/\\wdio.conf.js",
    "start_old": "ui5 serve --port 8080 -o index.html",
    "build_old": "ui5 build --clean-dest",
    "start": "fiori run --open \"test/flpSandbox.html?sap-ui-xx-viewCache=false#app-tile\"",
    "start-local": "fiori run --config ./ui5-local.yaml --open \"test/flpSandbox.html?sap-ui-xx-viewCache=false#app-tile\"",
    "start-noflp": "fiori run --open \"index.html?sap-ui-xx-viewCache=false\"",
    "start-variants-management": "fiori run --open \"preview.html?sap-ui-xx-viewCache=false&fiori-tools-rta-mode=true&sap-ui-rta-skip-flex-validation=true#preview-app\"",
    "build": "ui5 build -a --clean-dest --include-task=generateCachebusterInfo",
    "deploy": "fiori verify",
    "deploy-config": "fiori add deploy-config",
    "suite-tests": "fiori run --open 'test/testsuite.qunit.html'"
  },
  "devDependencies": {
    "@sap/ux-ui5-tooling": "1",
    "@ui5/cli": "^3.0.0",
    "@ui5/middleware-code-coverage": "^2.0.0",
    "@wdio/cli": "^8.45.0",
    "@wdio/local-runner": "^8.45.0",
    "@wdio/mocha-framework": "^8.45.0",
    "@wdio/spec-reporter": "^8.43.0",
    "eslint": "^9.32.0",
    "eslint-plugin-jsdoc": "^50.2.2",
    "globals": "^15.9.0",
    "karma": "^6.4.4",
    "karma-chrome-launcher": "^3.2.0",
    "karma-coverage": "^2.2.1",
    "karma-ui5": "^4.0.1",
    "rimraf": "3.0.2",
    "ui5-middleware-livereload": "^3.0.3",
    "wdio-ui5-service": "^2.1.1"
  },
  "private": true,
  "sapuxLayer": "CUSTOMER_BASE",
  "keywords": [
    "ui5",
    "openui5",
    "sapui5"
  ],
  "main": "webapp/index.html"
}
</file>

<file path="webapp/controller/AnalyticsDashboard.controller.js">
sap.ui.define([
  "./BaseController"
], function (BaseController) {
  "use strict";
  return BaseController.extend("exam.controller.AnalyticsDashboard", {
    onInit: function() {
      const that = this;
      // Fetch exam summary
      fetch("http://localhost:4000/api/analytics/exam-summary")
        .then(res => res.json())
        .then(data => {
          that.getView().setModel(new sap.ui.model.json.JSONModel(data), "summary");
          // Prepare pass/fail data for pie chart
          let totalPass = 0, totalFail = 0;
          data.forEach(e => {
            totalPass += Number(e.pass_count);
            totalFail += Number(e.fail_count);
          });
          const passfailData = [
            { label: "Pass", value: totalPass },
            { label: "Fail", value: totalFail }
          ];
          that.getView().setModel(new sap.ui.model.json.JSONModel(passfailData), "passfail");
          console.log("Exam summary data:", data);
          console.log("Pass/Fail pie data:", passfailData);
        });
      // Fetch most missed questions
    fetch("http://localhost:4000/api/analytics/most-missed-questions")
  .then(res => res.json())
  .then(data => {
    data.forEach(d => d.metric = "Wrong Answers");
    that.getView().setModel(new sap.ui.model.json.JSONModel(data), "missed");
    console.log("Most missed questions data:", data);
  });
    }
  });
});
</file>

<file path="webapp/controller/ResetPassword.controller.js">
sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox"
], function(BaseController, MessageBox) {
  "use strict";

  function getTokenFromUrl() {
    // 1) Try standard query string: ...?token=abc
    var searchParams = new URLSearchParams(window.location.search || "");
    var tokenFromSearch = searchParams.get("token");
    if (tokenFromSearch) {
      return tokenFromSearch;
    }

    // 2) Try query string after hash: #/reset-password?token=abc
    var hash = window.location.hash || "";
    var queryIndex = hash.indexOf("?");
    if (queryIndex !== -1) {
      var queryString = hash.substring(queryIndex + 1);
      var hashParams = new URLSearchParams(queryString);
      var tokenFromHashQuery = hashParams.get("token");
      if (tokenFromHashQuery) {
        return tokenFromHashQuery;
      }
    }

    // 3) Try path parameter style: #/reset-password/<token> or #/reset-password/token/<token>
    // Normalize and split hash path
    var trimmedHash = hash.replace(/^#\/?/, ""); // remove leading #/
    var segments = trimmedHash.split(/[/?&#]+/).filter(Boolean);
    // Look for patterns
    // a) ["reset-password", "<token>"]
    if (segments.length >= 2 && segments[0] === "reset-password" && segments[1] && segments[1] !== "token") {
      return segments[1];
    }
    // b) ["reset-password", "token", "<token>"]
    if (segments.length >= 3 && segments[0] === "reset-password" && segments[1] === "token" && segments[2]) {
      return segments[2];
    }

    return null;
  }

  return BaseController.extend("exam.controller.ResetPassword", {
    onInit: function() {
      // Cache the token so we don't lose it if the router rewrites the hash
      var token = getTokenFromUrl();
      if (token) {
        this._resetToken = token;
        try { sessionStorage.setItem("resetToken", token); } catch (e) {}
      } else {
        try { this._resetToken = sessionStorage.getItem("resetToken"); } catch (e) { this._resetToken = null; }
      }
      if (!this._resetToken) {
        MessageBox.error("Invalid or missing reset token.");
        // Optionally, redirect to login or home
      }
    },

    onResetPassword: function() {
      // Prefer cached token; fall back to storage and current URL parsing
      var token = this._resetToken;
      if (!token) {
        try { token = sessionStorage.getItem("resetToken"); } catch (e) {}
      }
      if (!token) {
        token = getTokenFromUrl();
        if (token) {
          try { sessionStorage.setItem("resetToken", token); } catch (e) {}
        }
      }
      var newPassword = this.byId("newPasswordInput").getValue();
      var confirmPassword = this.byId("confirmPasswordInput").getValue();

      if (!newPassword || !confirmPassword) {
        MessageBox.error("All fields are required.");
        return;
      }
      if (newPassword !== confirmPassword) {
        MessageBox.error("Passwords do not match.");
        return;
      }
      if (!token) {
        MessageBox.error("Invalid or missing reset token.");
        return;
      }
      fetch("http://localhost:4000/api/user/reset-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token: token, new_password: newPassword })
      })
      .then(function(res) { return res.json(); })
      .then(function(data) {
        if (data.error) {
          MessageBox.error(data.error);
        } else {
          MessageBox.success("Password reset successfully! You can now log in.");
          // Optionally redirect to login page after a short delay
        }
      })
      .catch(function(err) {
        MessageBox.error("Error: " + err.message);
      });
    }
  });
});
</file>

<file path="webapp/css/superadmin.css">
/* Super Admin Dashboard Custom Styles */

.superAdminSidebar {
  background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
  box-shadow: 0 4px 24px rgba(33, 150, 243, 0.08);
  border-radius: 20px;
  min-height: 100vh;
  padding: 32px 0 32px 0;
  align-items: center;
}

.sidebarName {
  font-size: 1.2rem;
  font-weight: bold;
  color: #1976d2;
  margin-top: 12px;
}

.sidebarRole {
  font-size: 1rem;
  color: #757575;
  margin-bottom: 16px;
}

.superAdminSidebar .sapMList {
  width: 100%;
  margin-top: 24px;
  background: transparent;
  border: none;
}

.superAdminSidebar .sapMLIB {
  border-radius: 12px;
  margin: 4px 12px;
  transition: background 0.2s;
}
.superAdminSidebar .sapMLIBActive, .superAdminSidebar .sapMLIB:hover {
  background: #1976d2 !important;
  color: #fff !important;
}


.superAdminMainContent {
  background: #f5f7fa;
  border-radius: 24px;
  min-height: 100vh;
  max-height: 100vh;
  box-shadow: 0 2px 16px rgba(33, 150, 243, 0.04);
  overflow-y: auto;
  /* Optional: for horizontal scroll if needed */
  /* overflow-x: auto; */
  padding: 32px;
}
.welcomeBanner {
  background: linear-gradient(90deg, #e3f2fd 60%, #bbdefb 100%);
  color: #1976d2;
  font-weight: bold;
  border-radius: 16px;
  box-shadow: 0 2px 8px #e3f2fd;
  padding: 12px 24px;
}

.statsRow {
  margin-top: 32px;
  gap: 16px;
}

.statCard {
  min-width: 180px;
  max-width: 220px;
  background: linear-gradient(135deg, #fff 60%, #e3f2fd 100%);
  border-radius: 16px;
  box-shadow: 0 2px 8px #eee;
  padding: 24px 16px;
  margin: 8px;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  transition: box-shadow 0.2s;
}
.statCard:hover {
  box-shadow: 0 6px 24px #90caf9;
}

.statCard .sapMObjectNumber {
  font-size: 2rem;
  color: #1976d2;
  font-weight: bold;
  margin-top: 8px;
}

/* Table and Panel tweaks */
.sapMPanel {
  border-radius: 16px;
  box-shadow: 0 2px 8px #e3f2fd;
  margin-top: 24px;
}

.sapMTable {
  border-radius: 12px;
  overflow: hidden;
}

/* Permission Management Panel */
.sapMPanel .sapMLabel {
  font-weight: bold;
  color: #1976d2;
}

/* Responsive adjustments */
@media (max-width: 900px) {
  .superAdminSidebar {
    min-width: 100px;
    padding: 12px 0;
  }
  .superAdminMainContent {
    padding: 12px;
  }
  .statCard {
    min-width: 120px;
    max-width: 100%;
    padding: 12px 8px;
  }
}
</file>

<file path="webapp/test/unit/controller/App.qunit.js">
/* global QUnit */
sap.ui.define(["exam/controller/App.controller"], function (AppController) {
	"use strict";
	console.log("App.qunit.js loaded ✅");


	QUnit.module("App controller test");

	QUnit.test("Controller has an onInit method", function (assert) {
		assert.strictEqual(typeof AppController.prototype.onInit, "function");
	});
	QUnit.test("sayHello returns correct string", function (assert) {
	const controller = new AppController();
	assert.strictEqual(controller.sayHello(), "Hello, World!");
});

});
</file>

<file path="webapp/view/AnalyticsDashboard.view.xml">
<mvc:View
  controllerName="exam.controller.AnalyticsDashboard"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:viz="sap.viz.ui5.controls"
  xmlns:viz.data="sap.viz.ui5.data"
  xmlns:viz.feeds="sap.viz.ui5.controls.common.feeds">
  <ScrollContainer vertical="true" height="100%" width="100%">
  <VBox>

  <VBox class="sapUiSmallMargin">
    <Title text="Exam Analytics" level="H1" class="sapUiSmallMarginBottom"/>

    <Panel headerText="Average Score per Exam (Chart)" expandable="true" expanded="true">
      <viz:VizFrame
        id="scoreBarChart"
        width="100%"
        height="400px"
        vizType="column"
        uiConfig="{applicationSet:'fiori'}"
        vizProperties="{
          'plotArea': { 'dataLabel': { 'visible': true } },
          'title': { 'visible': true, 'text': 'Average Score per Exam' }
        }">
        <viz:dataset>
          <viz.data:FlattenedDataset data="{summary>/}">
            <viz.data:dimensions>
              <viz.data:DimensionDefinition name="Exam" value="{summary>title}" />
            </viz.data:dimensions>
            <viz.data:measures>
              <viz.data:MeasureDefinition name="Avg. Score" value="{summary>avg_score}" />
            </viz.data:measures>
          </viz.data:FlattenedDataset>
        </viz:dataset>
        <viz:feeds>
          <viz.feeds:FeedItem uid="valueAxis" type="Measure" values="Avg. Score"/>
          <viz.feeds:FeedItem uid="categoryAxis" type="Dimension" values="Exam"/>
        </viz:feeds>
      </viz:VizFrame>
    </Panel>

    <!-- You can keep your tables below for details -->
    <Panel headerText="Exam Summary" expandable="true" expanded="true" class="sapUiSmallMarginTop">
      <Table items="{summary>/}">
        <columns>
          <Column><Text text="Exam"/></Column>
          <Column><Text text="Attempts"/></Column>
          <Column><Text text="Avg. Score"/></Column>
          <Column><Text text="Passes"/></Column>
          <Column><Text text="Fails"/></Column>
        </columns>
        <items>
          <ColumnListItem>
            <cells>
              <Text text="{summary>title}"/>
              <Text text="{summary>attempts}"/>
              <Text text="{summary>avg_score}"/>
              <Text text="{summary>pass_count}"/>
              <Text text="{summary>fail_count}"/>
            </cells>
          </ColumnListItem>
        </items>
      </Table>
    </Panel>
    <Panel headerText="Most Missed Questions (Heat Map)" expandable="true" expanded="true" class="sapUiSmallMarginTop">
  
   <viz:VizFrame
    id="missedBarChart"
    width="100%"
    height="400px"
    vizType="bar"
    uiConfig="{applicationSet:'fiori'}"
    vizProperties="{
      'title': { 'visible': true, 'text': 'Most Missed Questions' }
    }">
    <viz:dataset>
      <viz.data:FlattenedDataset data="{missed>/}">
        <viz.data:dimensions>
          <viz.data:DimensionDefinition name="Question" value="{missed>question_text}" />
        </viz.data:dimensions>
        <viz.data:measures>
          <viz.data:MeasureDefinition name="Count" value="{missed>wrong_count}" />
        </viz.data:measures>
      </viz.data:FlattenedDataset>
    </viz:dataset>
    <viz:feeds>
      <viz.feeds:FeedItem uid="valueAxis" type="Measure" values="Count"/>
      <viz.feeds:FeedItem uid="categoryAxis" type="Dimension" values="Question"/>
    </viz:feeds>
  </viz:VizFrame>

</Panel>
  </VBox>
    </VBox>
</ScrollContainer>
</mvc:View>
</file>

<file path="webapp/view/App.view.xml">
<mvc:View
	controllerName="exam.controller.App"
	displayBlock="true"
	xmlns="sap.m"
	xmlns:mvc="sap.ui.core.mvc">

	<App id="app" height="100%" width="100%" />

</mvc:View>
</file>

<file path="webapp/view/Exam.view.xml">
<mvc:View controllerName="exam.controller.Exam"
    xmlns="sap.m"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns:core="sap.ui.core">

  <VBox>
    <!-- Header -->
    <HBox justifyContent="SpaceBetween" alignItems="Center" class="sapUiSmallMarginBottom">
      <VBox>
        <Text text="Candidate: {/user/name}" />
        <Text text="Exam: {/user/examTitle}" />
      </VBox>
      <Text text="Time Left: {questions>/timeLeft}s" class="sapUiTinyMarginEnd"/>
    </HBox>

    <!-- Main Content -->
    <HBox>
      <!-- Left: Question Area -->
      <VBox width="70%" class="sapUiSmallMarginEnd">
        <Title text="Question {= ${questions>/currentIndex} + 1 }" level="H2"/>
        <Text text="{questions>/currentQuestion/question_text}" class="sapUiSmallMarginBottom"/>

        <!-- MCQ (Single Select) -->
        <RadioButtonGroup
          visible="{= ${questions>/currentQuestion/is_msq} !== true }"
          columns="1"
          selectedIndex="{questions>/currentQuestion/selectedIndex}"
          select="onSelectAnswer">
          <buttons>
            <RadioButton text="{questions>/currentQuestion/option_a}" />
            <RadioButton text="{questions>/currentQuestion/option_b}" />
            <RadioButton text="{questions>/currentQuestion/option_c}" />
            <RadioButton text="{questions>/currentQuestion/option_d}" />
          </buttons>
        </RadioButtonGroup>

        <!-- MSQ (Multiple Select) -->
        <VBox visible="{= ${questions>/currentQuestion/is_msq} === true }">
          <CheckBox text="{questions>/currentQuestion/option_a}"
                    selected="{= ${questions>/currentQuestion/selectedIndices}.includes(0) }"
                    select="onSelectMSQOption">
            <customData>
              <core:CustomData key="key" value="0" writeToDom="false"/>
            </customData>
          </CheckBox>
          <CheckBox text="{questions>/currentQuestion/option_b}"
                    selected="{= ${questions>/currentQuestion/selectedIndices}.includes(1) }"
                    select="onSelectMSQOption">
            <customData>
              <core:CustomData key="key" value="1" writeToDom="false"/>
            </customData>
          </CheckBox>
          <CheckBox text="{questions>/currentQuestion/option_c}"
                    selected="{= ${questions>/currentQuestion/selectedIndices}.includes(2) }"
                    select="onSelectMSQOption">
            <customData>
              <core:CustomData key="key" value="2" writeToDom="false"/>
            </customData>
          </CheckBox>
          <CheckBox text="{questions>/currentQuestion/option_d}"
                    selected="{= ${questions>/currentQuestion/selectedIndices}.includes(3) }"
                    select="onSelectMSQOption">
            <customData>
              <core:CustomData key="key" value="3" writeToDom="false"/>
            </customData>
          </CheckBox>
        </VBox>

        <HBox class="sapUiSmallMarginTop">
          <Button text="Previous" press="onPreviousQuestion"/>
          <Button text="Save &amp; Next" press="onSaveNext"/>
          <Button text="Mark for Review &amp; Next" press="onMarkForReview"/>
          <Button text="Clear" press="onClearAnswer"/>
          <Button text="Submit" press="onSubmitExam" type="Emphasized"/>
        </HBox>
      </VBox>

      <!-- Right: Navigation Panel -->
      <VBox width="30%" class="sapUiSmallMarginBegin">
        <Text text="Question Navigation" class="sapUiSmallMarginBottom"/>
        <List items="{questions>/questions}">
          <CustomListItem>
            <Button 
              text="{= ${questions>index} + 1}"
              width="3rem"
              type="{= ${questions>status} === 'answered' ? 'Accept' : 
                     ${questions>status} === 'markedForReview' ? 'Attention' : 'Default'}"
              press="onNavigateToQuestion">
              <customData>
                <core:CustomData key="questionIndex" value="{questions>index}" writeToDom="false"/>
              </customData>
            </Button>
          </CustomListItem>
        </List>

        <!-- Legend -->
        <VBox class="sapUiSmallMarginTop">
          <HBox>
            <Button width="2rem" type="Default"/>
            <Text text="Not Answered" class="sapUiTinyMarginBegin"/>
          </HBox>
          <HBox>
            <Button width="2rem" type="Accept"/>
            <Text text="Answered" class="sapUiTinyMarginBegin"/>
          </HBox>
          <HBox>
            <Button width="2rem" type="Attention"/>
            <Text text="Marked for Review" class="sapUiTinyMarginBegin"/>
          </HBox>
        </VBox>
      </VBox>
    </HBox>
  </VBox>
</mvc:View>
</file>

<file path="controllers/userController.js">
const crypto = require('crypto');
const db = require('../models/db');
const bcrypt = require('bcrypt');
// const { sendResetEmail } = require('../utils/mailer'); // Uncomment and implement if you have a mailer

exports.changePassword = async (req, res) => {
  const { user_id, old_password, new_password } = req.body;
  if (!user_id || !old_password || !new_password) {
    return res.status(400).json({ error: "Missing required fields" });
  }
  try {
    // 1. Get user by id
    const [users] = await db.query('SELECT password FROM users WHERE id = ?', [user_id]);
    if (users.length === 0) {
      return res.status(404).json({ error: "User not found" });
    }
    const user = users[0];

    // 2. Compare old password
    const match = await bcrypt.compare(old_password, user.password);
    if (!match) {
      return res.status(400).json({ error: "Old password is incorrect" });
    }

    // 3. Hash new password
    const hashed = await bcrypt.hash(new_password, 10);

    // 4. Update password
    await db.query('UPDATE users SET password = ? WHERE id = ?', [hashed, user_id]);
    res.json({ message: "Password changed successfully" });
  } catch (err) {
    console.error('Error changing password:', err);
    res.status(500).json({ error: "Internal server error" });
  }
};

exports.requestPasswordReset = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: "Email required" });

  const [users] = await db.query('SELECT id FROM users WHERE email = ?', [email]);
  if (users.length === 0) return res.status(404).json({ error: "User not found" });

  const token = crypto.randomBytes(32).toString('hex');
  const expires = new Date(Date.now() + 3600 * 1000); // 1 hour from now

  await db.query('UPDATE users SET reset_token = ?, reset_token_expires = ? WHERE email = ?', [token, expires, email]);

  // Send email with link (implement sendResetEmail in your mailer)
  // const resetLink = `http://localhost:8080/index.html#reset-password?token=${token}`;
  // await sendResetEmail(email, resetLink);

  res.json({ message: "Password reset link sent to your email." });
};

exports.resetPassword = async (req, res) => {
  const { token, new_password } = req.body;
  if (!token || !new_password) return res.status(400).json({ error: "Missing fields" });

  const [users] = await db.query(
    'SELECT id FROM users WHERE reset_token = ? AND reset_token_expires > NOW()',
    [token]
  );
  if (users.length === 0) return res.status(400).json({ error: "Invalid or expired token" });

  const hashed = await bcrypt.hash(new_password, 10);
  await db.query(
    'UPDATE users SET password_hash = ?, reset_token = NULL, reset_token_expires = NULL WHERE id = ?',
    [hashed, users[0].id]
  );

  res.json({ message: "Password has been reset successfully." });
};
</file>

<file path="webapp/controller/LoginEmployee.controller.js">
sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "exam/model/AuthService"
], function(BaseController, MessageBox, AuthService) {
  "use strict";
  return BaseController.extend("exam.controller.LoginEmployee", {
    onLogin: function() {
  const email = this.byId("email").getValue();
  const password = this.byId("password").getValue();
  const that = this;
  AuthService.login(email, password)
    .then(() => AuthService.getCurrentUser())
    .then(user => {
  const userModel = new sap.ui.model.json.JSONModel(user);
  that.getView().setModel(userModel, "user");
  if (user.role && user.role.toLowerCase() === "employee") {
    that.getRouter().navTo("employee-dashboard");
  } else {
    MessageBox.error("Not an employee account!");
  }
})
    .catch(err => MessageBox.error("Login failed: " + err.message));
},
onTogglePassword: function(oEvent) {
  const bSelected = oEvent.getParameter("selected");
  const oPasswordInput = this.byId("password");
  oPasswordInput.setType(bSelected ? "Text" : "Password");
},
onForgotPassword: function() {
  const dialog = new sap.m.Dialog({
    title: "Forgot Password",
    content: [
      new sap.m.Label({ text: "Enter your email address:" }),
      new sap.m.Input("forgotEmailInput", { type: "Email" })
    ],
    beginButton: new sap.m.Button({
      text: "Send Reset Link",
      press: function() {
        const email = sap.ui.getCore().byId("forgotEmailInput").getValue();
        if (!email) {
          sap.m.MessageBox.error("Please enter your email.");
          return;
        }
        fetch("http://localhost:4000/api/user/request-password-reset", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: email })
        })
        .then(res => res.json())
        .then(data => {
          if (data.error) {
            sap.m.MessageBox.error(data.error);
          } else {
            sap.m.MessageBox.success("If your email is registered, a reset link has been sent.");
            dialog.close();
          }
        })
        .catch(err => {
          sap.m.MessageBox.error("Error: " + err.message);
        });
      }
    }),
    endButton: new sap.m.Button({
      text: "Cancel",
      press: function() { dialog.close(); }
    })
  });
  dialog.open();
}
    /*onLogin: function() {
      console.log("Login pressed");  
      var email = this.byId("email").getValue();
      var password = this.byId("password").getValue();
      console.log(email, password); // Add this
      AuthService.login(email, password).then(data => {
        if (data.role === "employee") {
          this.getRouter().navTo("employee-dashboard");
        } else {
          MessageBox.error("Not an employee account!");
        }
      }).catch(err => MessageBox.error("Login failed: " + err.message));
    }*/
  });
});
</file>

<file path="webapp/test/unit/unitTests.qunit.js">
/* global QUnit */
QUnit.config.autostart = false;

sap.ui.require([
  "exam/test/unit/controller/App.qunit"
], function () {
    console.log("All tests loaded. Starting QUnit...");
  QUnit.start(); // 🚀 Starts test run after loading all modules
});
</file>

<file path="webapp/controller/LoginAdmin.controller.js">
/*sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "exam/model/AuthService",
  "exam/model/PermissionChecker"
], function(BaseController, MessageBox, AuthService, PermissionChecker) {
  "use strict";

  return BaseController.extend("exam.controller.LoginAdmin", {

    onLogin: function() {
      const email = this.byId("email").getValue();
      const password = this.byId("password").getValue();
      const that = this;

      AuthService.login(email, password)
        .then(() => AuthService.getCurrentUser())
        .then(function(user) {
          const userModel = new sap.ui.model.json.JSONModel(user);
          that.getView().setModel(userModel, "user");

          if (user.role && user.role.toLowerCase() === "super_admin") {
            that.getRouter().navTo("super-admin-dashboard");
          } else {
            PermissionChecker.hasAnyPermission(user.id, [
              "create_exam", "assign_exam", "create_questions", "view_results", "view_dashboard"
            ]).then(function(hasAdminPermission) {
              if (hasAdminPermission) {
                that.getRouter().navTo("admin-dashboard");
              } else {
                MessageBox.error("You do not have admin access.");
              }
            });
          }
        })
        .catch(function(err) {
          MessageBox.error("Login failed: " + err.message);
        });
    },

    onForgotPassword: function() {
      const email = this.byId("email").getValue(); // ✅ Use correct ID
      if (!email) {
        return sap.m.MessageBox.error("Please enter your registered email.");
      }

      fetch("http://localhost:4000/api/superadmin/forgot-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          sap.m.MessageBox.success("Password reset link sent to your email.");
        } else {
          sap.m.MessageBox.error(data.error || "Failed to send reset link.");
        }
      })
      .catch(err => sap.m.MessageBox.error("Error: " + err.message));
    }

  });

});
*/
sap.ui.define([
    "exam/controller/BaseController",
    "exam/model/AuthService",
    "exam/model/PermissionChecker",
    "sap/m/MessageToast"
], function (BaseController, AuthService, PermissionChecker, MessageToast) {
    "use strict";

    return BaseController.extend("exam.controller.LoginAdmin", {
        onLoginPress: async function () {
            const email = this.byId("usernameInput").getValue();
            const password = this.byId("passwordInput").getValue();

            if (!email || !password) {
                MessageToast.show("Please enter email and password");
                return;
            }

            try {
                // 🔹 Step 1: Call backend login
                const response = await AuthService.login(email, password);
                console.log("Login response:", response);

                // 🔹 Step 2: Check role & navigate
                if (response && response.user) {
                    if (response.user.role === "super_admin") {
                        this.getOwnerComponent().getRouter().navTo("super-admin-dashboard");
                    } else if (
                        response.user.role === "employee" && 
                        response.user.permissions?.length > 0
                    ) {
                        this.getOwnerComponent().getRouter().navTo("admin-dashboard");
                    } else {
                        MessageToast.show("You do not have admin permissions");
                    }
                } else {
                    MessageToast.show("Invalid response from server");
                }

            } catch (err) {
                console.error("Login failed:", err);
                MessageToast.show("Login failed. Please try again.");
            }
        },

        onLogin: async function () {
            const email = this.byId("email").getValue();
            const password = this.byId("password").getValue();

            if (!email || !password) {
                MessageToast.show("Please enter email and password");
                return;
            }

            try {
                const response = await AuthService.login(email, password);
                const user = response && response.user ? response.user : await AuthService.getCurrentUser();

                if (user && user.role) {
                    const role = String(user.role).toLowerCase();
                    if (role === "super_admin") {
                        this.getOwnerComponent().getRouter().navTo("super-admin-dashboard");
                        return;
                    }

                    if (role === "employee") {
                        if (Array.isArray(user.permissions) && user.permissions.length > 0) {
                            this.getOwnerComponent().getRouter().navTo("admin-dashboard");
                            return;
                        }
                        const userId = user.id || user.userId;
                        const hasAdminPermission = userId ? await PermissionChecker.hasAnyPermission(userId, [
                            "create_exam",
                            "assign_exam",
                            "create_questions",
                            "view_results",
                            "view_dashboard"
                        ]) : false;

                        if (hasAdminPermission) {
                            this.getOwnerComponent().getRouter().navTo("admin-dashboard");
                        } else {
                            MessageToast.show("You do not have admin permissions");
                        }
                        return;
                    }

                    MessageToast.show("You do not have admin permissions");
                } else {
                    MessageToast.show("Invalid response from server");
                }
            } catch (err) {
                console.error("Login failed:", err);
                MessageToast.show("Login failed. Please try again.");
            }
        },

        onForgotPassword: async function () {
            const email = this.byId("email").getValue();
            if (!email) {
                MessageToast.show("Please enter your registered email.");
                return;
            }

            try {
                const res = await fetch("http://localhost:4000/api/users/request-password-reset", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    credentials: "include",
                    body: JSON.stringify({ email })
                });
                const data = await res.json();
                if (!res.ok) {
                    throw new Error(data.error || "Failed to send reset link.");
                }
                MessageToast.show("Password reset link sent to your email.");
            } catch (err) {
                MessageToast.show(err.message);
            }
        }
    });
});
</file>

<file path="webapp/view/LoginAdmin.view.xml">
<mvc:View
  controllerName="exam.controller.LoginAdmin"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:core="sap.ui.core"
  displayBlock="true">

  <Page showHeader="false" class="admin-login-page bg-override" enableScrolling="false">
    <content>
      <VBox class="admin-login-background">
        <!-- Animated floating icons -->
        <HBox class="admin-floating-shapes">
          <core:Icon src="sap-icon://key" class="admin-floating-shape shape-1" />
          <core:Icon src="sap-icon://shield" class="admin-floating-shape shape-2" />
          <core:Icon src="sap-icon://sys-monitor" class="admin-floating-shape shape-3" />
          <core:Icon src="sap-icon://lock" class="admin-floating-shape shape-4" />
        </HBox>

        <!-- Decorative grid pattern -->
        <VBox class="admin-grid-pattern">
          <HBox class="admin-grid-row">
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
          </HBox>
          <HBox class="admin-grid-row">
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="admin-grid-dot" />
          </HBox>
        </VBox>

        <!-- Main content -->
        <HBox class="admin-main-content-container">
          <!-- Left: Branding Section -->
          <VBox class="admin-branding-section">
            <VBox class="admin-brand-content">
              <core:Icon src="sap-icon://key" class="admin-brand-icon" />
              <Title text="Admin Control Panel" level="H1" class="admin-brand-title" />
              <Text text="Manage exams, monitor progress, and configure system settings." class="admin-brand-subtitle" />

              <!-- Feature highlights -->
              <VBox class="admin-feature-highlights">
                <HBox class="admin-feature-item">
                  <core:Icon src="sap-icon://sys-monitor" class="admin-feature-icon" />
                  <Text text="System Monitoring" class="admin-feature-text" />
                </HBox>
                <HBox class="admin-feature-item">
                  <core:Icon src="sap-icon://employee-pane" class="admin-feature-icon" />
                  <Text text="User Management" class="admin-feature-text" />
                </HBox>
                <HBox class="admin-feature-item">
                  <core:Icon src="sap-icon://action-settings" class="admin-feature-icon" />
                  <Text text="Configurable Settings" class="admin-feature-text" />
                </HBox>
                <HBox class="admin-feature-item">
                  <core:Icon src="sap-icon://shield" class="admin-feature-icon" />
                  <Text text="Enhanced Security" class="admin-feature-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>

          <!-- Right: Login Form -->
          <VBox class="admin-login-section">
            <VBox class="admin-login-container-modern">
              <!-- Header -->
              <VBox class="admin-login-header" alignItems="Center">
                <core:Icon src="sap-icon://key" class="admin-app-icon" />
                <Title text="Welcome Admin" level="H1" class="admin-modern-login-title" />
                <Text text="Sign in to your control panel" class="admin-modern-login-subtitle" />
              </VBox>

              <!-- Form -->
              <VBox class="admin-login-form-container" alignItems="Center">
                <VBox class="admin-input-group">
                  <HBox class="admin-input-container">
                    <core:Icon src="sap-icon://email" class="admin-input-icon" />
                    <Input 
                      id="email" 
                      placeholder="Enter admin email" 
                      type="Email" 
                      class="admin-modern-input"
                    />
                  </HBox>
                  
                  <HBox class="admin-input-container">
                    <core:Icon src="sap-icon://locked" class="admin-input-icon" />
                    <Input 
                      id="password" 
                      placeholder="Enter password" 
                      type="Password" 
                      class="admin-modern-input"
                    />
                  </HBox>
                </VBox>

                <!-- Login Button -->
                <Button 
                  text="Sign In" 
                  type="Emphasized" 
                  press="onLogin" 
                  class="admin-modern-login-btn"
                  icon="sap-icon://log"
                  iconFirst="false"
                />
                <Button text="Forgot Password" press="onForgotPassword"/>


                <!-- Info -->
                <HBox class="admin-login-info" justifyContent="Center">
                  <core:Icon src="sap-icon://shield" class="admin-info-icon" />
                  <Text text="Secure &amp; Admin-only Access" class="admin-info-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
        </HBox>
      </VBox>
    </content>
  </Page>
</mvc:View>
</file>

<file path="webapp/view/LoginEmployee.view.xml">
<mvc:View
  controllerName="exam.controller.LoginEmployee"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:core="sap.ui.core"
  displayBlock="true">

  <Page
    showHeader="false"
    class="employee-login-page bg-override"

    enableScrolling="false">
    
    <content>
      <!-- Enhanced background with animated elements -->
      <VBox class="employee-login-background" >
        <!-- Animated background elements -->
        <HBox class="employee-floating-shapes">
          <core:Icon src="sap-icon://user" class="employee-floating-shape shape-1" />
          <core:Icon src="sap-icon://shield" class="employee-floating-shape shape-2" />
          <core:Icon src="sap-icon://settings" class="employee-floating-shape shape-3" />
          <core:Icon src="sap-icon://analytics" class="employee-floating-shape shape-4" />
          <core:Icon src="sap-icon://circle-task-2" class="employee-floating-shape shape-5" />
          <core:Icon src="sap-icon://calendar" class="employee-floating-shape shape-6" />
        </HBox>

        <!-- Decorative grid pattern -->
        <VBox class="employee-grid-pattern">
          <HBox class="employee-grid-row">
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
          </HBox>
          <HBox class="employee-grid-row">
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="employee-grid-dot" />
          </HBox>
        </VBox>

        <!-- Main content container -->
        <HBox class="employee-main-content-container">
          <!-- Left side - Branding and company info -->
          <VBox class="employee-branding-section">
            <VBox class="employee-brand-content">
              <core:Icon src="sap-icon://user" class="employee-brand-icon" />
              <Title text="Employee Portal" level="H1" class="employee-brand-title" />
              <Text text="Access your professional development journey" class="employee-brand-subtitle" />

              <!-- Company highlights -->
              <VBox class="employee-feature-highlights">
                <HBox class="employee-feature-item">
                  <core:Icon src="sap-icon://shield" class="employee-feature-icon" />
                  <Text text="Secure Access" class="employee-feature-text" />
                </HBox>
                <HBox class="employee-feature-item">
                  <core:Icon src="sap-icon://analytics" class="employee-feature-icon" />
                  <Text text="Performance Tracking" class="employee-feature-text" />
                </HBox>
                <HBox class="employee-feature-item">
                  <core:Icon src="sap-icon://calendar" class="employee-feature-icon" />
                  <Text text="Exam Scheduling" class="employee-feature-text" />
                </HBox>
                <HBox class="employee-feature-item">
                  <core:Icon src="sap-icon://chart" class="employee-feature-icon" />
                  <Text text="Progress Analytics" class="employee-feature-text" />
                </HBox>
              </VBox>

              <!-- Company stats -->
              <VBox class="employee-stats-container">
                <HBox class="employee-stat-item">
                  <VBox class="employee-stat-number">
                    <Text text="500+" class="employee-stat-value" />
                    <Text text="Active Employees" class="employee-stat-label" />
                  </VBox>
                  <VBox class="employee-stat-number">
                    <Text text="95%" class="employee-stat-value" />
                    <Text text="Success Rate" class="employee-stat-label" />
                  </VBox>
                </HBox>
              </VBox>
            </VBox>
          </VBox>

          <!-- Right side - Login form -->
          <VBox class="employee-login-section">
            <VBox class="employee-login-container-modern">
              <!-- Header section -->
              <VBox class="employee-login-header" alignItems="Center">
                <core:Icon src="sap-icon://user" class="employee-app-icon" />
                <Title text="Welcome Back" level="H1" class="employee-modern-login-title" />
                <Text text="Sign in to your employee account" class="employee-modern-login-subtitle" />
              </VBox>

              <!-- Login form -->
              <VBox class="employee-login-form-container" alignItems="Center">
                <VBox class="employee-input-group">
                  <HBox class="employee-input-container">
                    <core:Icon src="sap-icon://email" class="employee-input-icon" />
                    <Input 
                      id="email" 
                      placeholder="Enter your email address" 
                      type="Email" 
                      class="employee-modern-input"
                    />
                  </HBox>
                  
                  <HBox class="employee-input-container">
                    <core:Icon src="sap-icon://locked" class="employee-input-icon" />
                    <Input 
                      id="password" 
                      placeholder="Enter your password" 
                      type="Password" 
                      class="employee-modern-input"
                    />
                  </HBox>
                </VBox>

                <!-- Forgot password link -->
                <HBox justifyContent="End" width="100%" class="employee-forgot-password-container">
                  <Link 
                    text="Forgot password?" 
                    press="onForgotPassword" 
                    class="employee-forgot-password-link"
                  />
                </HBox>

                <!-- Login button -->
                <Button 
                  text="Sign In" 
                  type="Emphasized" 
                  press="onLogin" 
                  class="employee-modern-login-btn"
                  icon="sap-icon://arrow-right"
                  iconFirst="false"
                />

                <!-- Additional info -->
                <HBox class="employee-login-info" justifyContent="Center">
                  <core:Icon src="sap-icon://shield" class="employee-info-icon" />
                  <Text text="Secure &amp; Encrypted Connection" class="employee-info-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
        </HBox>
      </VBox>
    </content>
  </Page>
</mvc:View>
</file>

<file path="webapp/controller/Main.controller.js">
sap.ui.define([
  "./BaseController",
  "sap/ui/model/json/JSONModel",
  
], function (BaseController, JSONModel) {
  "use strict";

  return BaseController.extend("exam.controller.Main", {
    onInit: function () {
      this._avatars = [
        {
          role: "Admin",
          avatar: "images/admin.jpg",
          route: "login-admin",
          description: "Manage exams, users, and system settings"
        },
        {
          role: "Employee",
          avatar: "images/employee.jpg",
          route: "login-employee",
          description: "Take exams and view your results"
        }
      ];

      this._currentIndex = 0;
      this.getView().setModel(new JSONModel({
        selected: this._avatars[this._currentIndex],
        currentIndex: this._currentIndex,
        totalRoles: this._avatars.length
      }));
    },

    onNextAvatar: function () {
      this._currentIndex = (this._currentIndex + 1) % this._avatars.length;
      this._updateAvatar();
      this._updateRoleIndicators();
    },

    onPreviousAvatar: function () {
      this._currentIndex =
        (this._currentIndex - 1 + this._avatars.length) % this._avatars.length;
      this._updateAvatar();
      this._updateRoleIndicators();
    },

    _updateAvatar: function () {
      const oModel = this.getView().getModel();
      oModel.setProperty("/selected", this._avatars[this._currentIndex]);
      oModel.setProperty("/currentIndex", this._currentIndex);
    },

    _updateRoleIndicators: function () {
      // This will be handled by the view binding
      const oModel = this.getView().getModel();
      oModel.setProperty("/currentIndex", this._currentIndex);
    },

    onLoginContinue: function () {
      const selectedRole = this._avatars[this._currentIndex];
      
      // Add a small delay for smooth transition
      setTimeout(() => {
        this.getRouter().navTo(selectedRole.route);
      }, 200);
    },

    onAvatarClick: function () {
      // Optional: Add click functionality to avatar
      this.onNextAvatar();
    }
  });
});
</file>

<file path="webapp/view/Main.view.xml">
<mvc:View
  controllerName="exam.controller.Main"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns="sap.m"
  xmlns:core="sap.ui.core"
>
  <Page
    showHeader="false"
    class="modern-login-page"
    enableScrolling="false"
  >
    <content>
      <!-- Enhanced background with more visual elements -->
      <VBox class="login-background">
        <!-- Animated background elements -->
        <HBox class="floating-shapes">
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-1" />
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-2" />
          <core:Icon src="sap-icon://circle-task-2" class="floating-shape shape-3" />
          <core:Icon src="sap-icon://shield" class="floating-shape shape-4" />
          <core:Icon src="sap-icon://user" class="floating-shape shape-5" />
          <core:Icon src="sap-icon://settings" class="floating-shape shape-6" />
        </HBox>
        
        <!-- Decorative grid pattern -->
        <VBox class="grid-pattern">
          <HBox class="grid-row">
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
          </HBox>
          <HBox class="grid-row">
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
            <core:Icon src="sap-icon://circle-task" class="grid-dot" />
          </HBox>
        </VBox>
        
        <!-- Main content container -->
        <HBox class="main-content-container">
          <!-- Left side - Branding and info -->
          <VBox class="branding-section">
            <VBox class="brand-content">
              <core:Icon src="sap-icon://shield" class="brand-icon" />
              <Title text="Secure Examination System" level="H1" class="brand-title" />
              <Text text="Professional assessment platform for modern organizations" class="brand-subtitle" />
              
              <!-- Feature highlights -->
              <VBox class="feature-highlights">
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://shield" class="feature-icon" />
                                           <Text text="Secure &amp; Encrypted" class="feature-text" />
                </HBox>
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://user" class="feature-icon" />
                  <Text text="Multi-Role Access" class="feature-text" />
                </HBox>
                <HBox class="feature-item">
                  <core:Icon src="sap-icon://analytics" class="feature-icon" />
                  <Text text="Real-time Analytics" class="feature-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
          
          <!-- Right side - Login form -->
          <VBox class="login-section">
            <VBox class="login-container-modern">
              <!-- Header section -->
              <VBox class="login-header" alignItems="Center">
                <core:Icon src="sap-icon://shield" class="app-icon" />
                <Title text="Welcome Back" level="H1" class="modern-login-title" />
                <Text text="Choose your role to continue" class="modern-login-subtitle" />
              </VBox>

              <!-- Role selection section -->
              <VBox class="role-selection-container" alignItems="Center">
                <HBox class="avatar-carousel-modern" alignItems="Center" justifyContent="Center">
                  <Button 
                    icon="sap-icon://nav-back" 
                    press="onPreviousAvatar" 
                    class="modern-nav-arrow" 
                    tooltip="Previous Role"
                  />

                  <VBox alignItems="Center" class="avatar-section-modern">
                    <VBox class="avatar-container">
                      <Image src="{/selected/avatar}" class="modern-avatar-image" />
                      <VBox class="avatar-overlay">
                        <core:Icon src="sap-icon://user" class="avatar-icon" />
                      </VBox>
                    </VBox>
                    <Text text="{/selected/role}" class="modern-role-label" />
                    <Text text="Click to select" class="role-hint" />
                  </VBox>

                  <Button 
                    icon="sap-icon://nav-forward" 
                    press="onNextAvatar" 
                    class="modern-nav-arrow" 
                    tooltip="Next Role"
                  />
                </HBox>

                <!-- Role indicators -->
                <HBox class="role-indicators" justifyContent="Center">
                  <core:Icon 
                    src="{= ${/currentIndex} === 0 ? 'sap-icon://circle-task' : 'sap-icon://circle-task-2'}" 
                    class="role-indicator" 
                  />
                  <core:Icon 
                    src="{= ${/currentIndex} === 1 ? 'sap-icon://circle-task' : 'sap-icon://circle-task-2'}" 
                    class="role-indicator" 
                  />
                </HBox>
              </VBox>

              <!-- Action section -->
              <VBox class="login-actions" alignItems="Center">
                <Button 
                  text="Continue" 
                  press="onLoginContinue" 
                  class="modern-continue-btn" 
                  icon="sap-icon://arrow-right"
                  iconFirst="false"
                />
                
                <!-- Additional info -->
                <HBox class="login-info" justifyContent="Center">
                  <core:Icon src="sap-icon://shield" class="info-icon" />
                                           <Text text="Secure &amp; Encrypted" class="info-text" />
                </HBox>
              </VBox>
            </VBox>
          </VBox>
        </HBox>
      </VBox>
    </content>
  </Page>
</mvc:View>
</file>

<file path="karma-ci.conf.js">
module.exports = function (config) {
  "use strict";

  require("./karma.conf")(config); // Load base config

  config.set({
    browsers: ["ChromeHeadlessCI"],
    singleRun: true,

    // Timeout settings
    browserNoActivityTimeout: 30000,
    browserDisconnectTimeout: 3000,
    browserDisconnectTolerance: 2,
    captureTimeout: 30000,

    // ❌ REMOVE this block completely:
    // client: {
    //   loadScripts: ["test/unit/unitTests.qunit.js"]
    // },

    // Custom launcher for CI environments
    customLaunchers: {
      ChromeHeadlessCI: {
        base: "ChromeHeadless",
        flags: [
          "--no-sandbox",
          "--disable-gpu",
          "--disable-dev-shm-usage",
          "--disable-software-rasterizer"
        ]
      }
    }
  });
};
</file>

<file path="webapp/controller/Exam.controller.js">
/*sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "exam/model/ExamService",
  "exam/model/AuthService"
], function (BaseController, MessageBox, ExamService, AuthService) {
  "use strict";

  let countdownInterval;

  return BaseController.extend("exam.controller.Exam", {
    onInit: function () {
      // Attach the route handler immediately!
      var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      oRouter.getRoute("exam").attachPatternMatched(this._onRouteMatched, this);

      // Secure Exam: Add event listeners
      this._onFullscreenChangeBound = this._onFullscreenChange.bind(this);
      document.addEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      this._onContextMenuBound = function(e) { e.preventDefault(); };
      document.addEventListener("contextmenu", this._onContextMenuBound);

      // Set an empty model immediately to prevent empty bindings
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");

      // Check authentication (async, but do NOT attach route handler here)
      AuthService.getCurrentUser()
        .then(user => {
          this.getView().setModel(new sap.ui.model.json.JSONModel(user), "user");
        })
        .catch(() => {
          MessageBox.error("Unauthorized access.");
          this.getRouter().navTo("login-employee");
        });
    },

    onExit: function() {
      // Remove event listeners
      document.removeEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      document.removeEventListener("contextmenu", this._onContextMenuBound);
    },

    _requestFullscreen: function() {
      var elem = document.documentElement;
      if (elem.requestFullscreen) {
        elem.requestFullscreen();
      } else if (elem.mozRequestFullScreen) { // Firefox
        elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera
        elem.webkitRequestFullscreen();
      } else if (elem.msRequestFullscreen) { // IE/Edge
        elem.msRequestFullscreen();
      }
    },

    _onFullscreenChange: function() {
      // If not in fullscreen, auto-submit
      if (
        !document.fullscreenElement &&
        !document.webkitFullscreenElement &&
        !document.mozFullScreenElement &&
        !document.msFullscreenElement
      ) {
        sap.m.MessageBox.warning("You exited fullscreen. The exam will be auto-submitted.");
        this.onSubmitExam(true);
      }
    },

    _onRouteMatched: function (oEvent) {
      // Reset model to empty
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");

      const examId = oEvent.getParameter("arguments").examId;
      const that = this;

      ExamService.getExamQuestions(examId)
        .then(data => {
          console.log("Backend response:", data); // Debug log
          if (!Array.isArray(data) || data.length === 0) {
            MessageBox.warning("No questions found.");
            that._initEmptyModel();
            return;
          }

          data.forEach((q, index) => {
            q.index = index;
            q.status = "notAnswered";
            // Normalize is_msq to boolean
            q.is_msq = q.is_msq === true || q.is_msq === 1 || q.is_msq === "1" || q.is_msq === "true";
            if (q.is_msq) {
              q.selectedIndices = [];
              q.selectedIndex = -1;
            } else {
              q.selectedIndex = -1;
              q.selectedIndices = [];
            }
          });

          console.log("Processed questions:", data); // Debug log

          const model = new sap.ui.model.json.JSONModel({
            questions: data,
            currentIndex: 0,
            currentQuestion: data[0],
            timeLeft: 900
          });

          // Automatically update currentQuestion when currentIndex changes
          model.attachPropertyChange(function (e) {
            if (e.getParameter("path") === "/currentIndex") {
              const index = e.getParameter("value");
              const all = model.getProperty("/questions");
              model.setProperty("/currentQuestion", all[index]);
            }
          });

          that.getView().setModel(model, "questions");
          that._startCountdown();

          // --- Secure Exam: Request fullscreen after questions are loaded ---
          that._requestFullscreen();
        })
        .catch(err => {
          console.error("Error loading questions:", err); // Debug log
          MessageBox.error("Failed to load exam.");
          that._initEmptyModel();
        });
    },

    _initEmptyModel: function () {
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");
    },

    _startCountdown: function () {
      const that = this;
      const model = this.getView().getModel("questions");
      if (!model) return;

      countdownInterval = setInterval(() => {
        const timeLeft = model.getProperty("/timeLeft");
        if (timeLeft <= 0) {
          clearInterval(countdownInterval);
          MessageBox.warning("Time is up! Auto-submitting exam.");
          that.onSubmitExam(true);
        } else {
          model.setProperty("/timeLeft", timeLeft - 1);
        }
      }, 1000);
    },

    onSelectAnswer: function (oEvent) {
      const model = this.getView().getModel("questions");
      const selectedIndex = oEvent.getParameter("selectedIndex");
      const index = model.getProperty("/currentIndex");

      model.setProperty(`/questions/${index}/selectedIndex`, selectedIndex);
      model.setProperty(`/questions/${index}/status`, "answered");
      model.setProperty("/currentQuestion/selectedIndex", selectedIndex);
      model.setProperty("/currentQuestion/status", "answered");
    },

    onSelectMSQOption: function (oEvent) {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const key = parseInt(oEvent.getSource().data("key"), 10);
      const isSelected = oEvent.getParameter("selected");

      let selectedIndices = model.getProperty(`/questions/${index}/selectedIndices`) || [];

      // Always create a new array to trigger UI update
      if (isSelected) {
        if (!selectedIndices.includes(key)) {
          selectedIndices = selectedIndices.concat([key]);
        }
      } else {
        selectedIndices = selectedIndices.filter(i => i !== key);
      }

      model.setProperty(`/questions/${index}/selectedIndices`, selectedIndices);
      model.setProperty("/currentQuestion/selectedIndices", selectedIndices);

      // Update status
      const status = selectedIndices.length > 0 ? "answered" : "notAnswered";
      model.setProperty(`/questions/${index}/status`, status);
      model.setProperty("/currentQuestion/status", status);
      console.log("Selected indices for question", index, selectedIndices);
    },

    onSaveNext: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      // Check if current question is answered (for both MCQ and MSQ)
      const currentQuestion = questions[index];
      const isAnswered = currentQuestion.is_msq ? 
        (currentQuestion.selectedIndices && currentQuestion.selectedIndices.length > 0) :
        (currentQuestion.selectedIndex !== -1);

      if (isAnswered) {
        questions[index].status = "answered";
      }

      // Update full questions array to trigger UI refresh
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onMarkForReview: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      questions[index].status = "markedForReview";
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onClearAnswer: function () {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const currentQuestion = model.getProperty("/currentQuestion");

      if (currentQuestion.is_msq) {
        model.setProperty(`/questions/${index}/selectedIndices`, []);
        model.setProperty("/currentQuestion/selectedIndices", []);
      } else {
        model.setProperty(`/questions/${index}/selectedIndex`, -1);
        model.setProperty("/currentQuestion/selectedIndex", -1);
      }
      
      model.setProperty(`/questions/${index}/status`, "notAnswered");
      model.setProperty("/currentQuestion/status", "notAnswered");
    },

    onNavigateToQuestion: function (oEvent) {
      const index = oEvent.getSource().data("questionIndex");
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      model.setProperty("/currentIndex", index);
      model.setProperty("/currentQuestion", questions[index]);
    },

    onSubmitExam: function (isAutoSubmit = false) {
      clearInterval(countdownInterval);
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      if (!Array.isArray(questions) || questions.length === 0) {
        MessageBox.error("No questions to submit.");
        return;
      }

      const answers = questions.map(q => {
        if (q.is_msq) {
          // For MSQ: convert selected indices to option letters (A, B, C, D)
          const optionMap = ["A", "B", "C", "D"];
          const selected = (q.selectedIndices || []).map(i => optionMap[i]);
          return { question_id: q.id, answer: selected }; // answer is an array
        } else {
          // For MCQ: convert selected index to option letter
          let answer = null;
          if (q.selectedIndex === 0) answer = "A";
          if (q.selectedIndex === 1) answer = "B";
          if (q.selectedIndex === 2) answer = "C";
          if (q.selectedIndex === 3) answer = "D";
          return { question_id: q.id, answer };
        }
      });

      const examId = this._getExamIdFromRoute();
      const user = this.getView().getModel("user").getData();
      const userId = user.id;

      ExamService.submitExamAnswers(examId, userId, answers)
        .then(() => {
          MessageBox.success(isAutoSubmit ? "Exam auto-submitted." : "Exam submitted successfully.");
          setTimeout(() => {
            this.getRouter().navTo("employee-dashboard");
          }, 1000);
        })
        .catch(err => {
          MessageBox.error("Failed to submit exam: " + err.message);
        });
    },

    _getExamIdFromRoute: function () {
      const oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      const oHash = oRouter.getHashChanger().getHash();
      return oHash.split("/")[1];
    },

    onPreviousQuestion: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      if (index > 0) {
        index -= 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    }
  });
});*/
/*sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "exam/model/ExamService",
  "exam/model/AuthService"
], function (BaseController, MessageBox, ExamService, AuthService) {
  "use strict";

  let countdownInterval;

  return BaseController.extend("exam.controller.Exam", {
    onInit: function () {
      // Attach the route handler immediately!
      var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      oRouter.getRoute("exam").attachPatternMatched(this._onRouteMatched, this);

      // Secure Exam: Add event listeners
      this._onFullscreenChangeBound = this._onFullscreenChange.bind(this);
      document.addEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      this._onContextMenuBound = function(e) { e.preventDefault(); };
      document.addEventListener("contextmenu", this._onContextMenuBound);

      // Set an empty model immediately to prevent empty bindings
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");

      // Check authentication (async, but do NOT attach route handler here)
      AuthService.getCurrentUser()
        .then(user => {
          this.getView().setModel(new sap.ui.model.json.JSONModel(user), "user");
        })
        .catch(() => {
          MessageBox.error("Unauthorized access.");
          this.getRouter().navTo("login-employee");
        });
    },

    onExit: function() {
      // Remove event listeners
      document.removeEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      document.removeEventListener("contextmenu", this._onContextMenuBound);
    },

    _requestFullscreen: function() {
      var elem = document.documentElement;
      if (elem.requestFullscreen) {
        elem.requestFullscreen();
      } else if (elem.mozRequestFullScreen) { // Firefox
        elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera
        elem.webkitRequestFullscreen();
      } else if (elem.msRequestFullscreen) { // IE/Edge
        elem.msRequestFullscreen();
      }
    },

    _onFullscreenChange: function() {
      // If not in fullscreen, auto-submit
      if (
        !document.fullscreenElement &&
        !document.webkitFullscreenElement &&
        !document.mozFullScreenElement &&
        !document.msFullscreenElement
      ) {
        sap.m.MessageBox.warning("You exited fullscreen. The exam will be auto-submitted.");
        this.onSubmitExam(true);
      }
    },

    _onRouteMatched: function (oEvent) {
      // Reset model to empty
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");

      const examId = oEvent.getParameter("arguments").examId;
      const that = this;

      ExamService.getExamQuestions(examId)
        .then(data => {
          console.log("Backend response:", data); // Debug log
          if (!Array.isArray(data) || data.length === 0) {
            MessageBox.warning("No questions found.");
            that._initEmptyModel();
            return;
          }

          data.forEach((q, index) => {
            q.index = index;
            q.status = "notAnswered";
            // Normalize is_msq to boolean
            q.is_msq = q.is_msq === true || q.is_msq === 1 || q.is_msq === "1" || q.is_msq === "true";
            if (q.is_msq) {
              q.selectedIndices = [];
              q.selectedIndex = -1;
            } else {
              q.selectedIndex = -1;
              q.selectedIndices = [];
            }
          });

          console.log("Processed questions:", data); // Debug log

          const model = new sap.ui.model.json.JSONModel({
            questions: data,
            currentIndex: 0,
            currentQuestion: data[0],
            timeLeft: 900
          });

          // Automatically update currentQuestion when currentIndex changes
          model.attachPropertyChange(function (e) {
            if (e.getParameter("path") === "/currentIndex") {
              const index = e.getParameter("value");
              const all = model.getProperty("/questions");
              model.setProperty("/currentQuestion", all[index]);
            }
          });

          that.getView().setModel(model, "questions");
          that._startCountdown();

          // --- Secure Exam: Request fullscreen after questions are loaded ---
          that._requestFullscreen();
        })
        .catch(err => {
          console.error("Error loading questions:", err); // Debug log
          MessageBox.error("Failed to load exam.");
          that._initEmptyModel();
        });
    },

    _initEmptyModel: function () {
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");
    },

    _startCountdown: function () {
      const that = this;
      const model = this.getView().getModel("questions");
      if (!model) return;

      countdownInterval = setInterval(() => {
        const timeLeft = model.getProperty("/timeLeft");
        if (timeLeft <= 0) {
          clearInterval(countdownInterval);
          MessageBox.warning("Time is up! Auto-submitting exam.");
          that.onSubmitExam(true);
        } else {
          model.setProperty("/timeLeft", timeLeft - 1);
        }
      }, 1000);
    },

    onSelectAnswer: function (oEvent) {
      const model = this.getView().getModel("questions");
      const selectedIndex = oEvent.getParameter("selectedIndex");
      const index = model.getProperty("/currentIndex");

      model.setProperty(`/questions/${index}/selectedIndex`, selectedIndex);
      model.setProperty(`/questions/${index}/status`, "answered");
      model.setProperty("/currentQuestion/selectedIndex", selectedIndex);
      model.setProperty("/currentQuestion/status", "answered");
    },

    onSelectMSQOption: function (oEvent) {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const key = parseInt(oEvent.getSource().data("key"), 10);
      const isSelected = oEvent.getParameter("selected");

      let selectedIndices = model.getProperty(`/questions/${index}/selectedIndices`) || [];

      // Always create a new array to trigger UI update
      if (isSelected) {
        if (!selectedIndices.includes(key)) {
          selectedIndices = selectedIndices.concat([key]);
        }
      } else {
        selectedIndices = selectedIndices.filter(i => i !== key);
      }

      model.setProperty(`/questions/${index}/selectedIndices`, selectedIndices);
      model.setProperty("/currentQuestion/selectedIndices", selectedIndices);

      // Update status
      const status = selectedIndices.length > 0 ? "answered" : "notAnswered";
      model.setProperty(`/questions/${index}/status`, status);
      model.setProperty("/currentQuestion/status", status);
      console.log("Selected indices for question", index, selectedIndices);
    },

    onSaveNext: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      // Check if current question is answered (for both MCQ and MSQ)
      const currentQuestion = questions[index];
      const isAnswered = currentQuestion.is_msq ? 
        (currentQuestion.selectedIndices && currentQuestion.selectedIndices.length > 0) :
        (currentQuestion.selectedIndex !== -1);

      if (isAnswered) {
        questions[index].status = "answered";
      }

      // Update full questions array to trigger UI refresh
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onMarkForReview: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      questions[index].status = "markedForReview";
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onClearAnswer: function () {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const currentQuestion = model.getProperty("/currentQuestion");

      if (currentQuestion.is_msq) {
        model.setProperty(`/questions/${index}/selectedIndices`, []);
        model.setProperty("/currentQuestion/selectedIndices", []);
      } else {
        model.setProperty(`/questions/${index}/selectedIndex`, -1);
        model.setProperty("/currentQuestion/selectedIndex", -1);
      }
      
      model.setProperty(`/questions/${index}/status`, "notAnswered");
      model.setProperty("/currentQuestion/status", "notAnswered");
    },

    onNavigateToQuestion: function (oEvent) {
      const index = oEvent.getSource().data("questionIndex");
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      model.setProperty("/currentIndex", index);
      model.setProperty("/currentQuestion", questions[index]);
    },

    onSubmitExam: function (isAutoSubmit = false) {
      clearInterval(countdownInterval);
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      if (!Array.isArray(questions) || questions.length === 0) {
        MessageBox.error("No questions to submit.");
        return;
      }

      const answers = questions.map(q => {
        if (q.is_msq) {
          // For MSQ: convert selected indices to option letters (A, B, C, D)
          const optionMap = ["A", "B", "C", "D"];
          const selected = (q.selectedIndices || []).map(i => optionMap[i]);
          return { question_id: q.id, answer: selected }; // answer is an array
        } else {
          // For MCQ: convert selected index to option letter
          let answer = null;
          if (q.selectedIndex === 0) answer = "A";
          if (q.selectedIndex === 1) answer = "B";
          if (q.selectedIndex === 2) answer = "C";
          if (q.selectedIndex === 3) answer = "D";
          return { question_id: q.id, answer };
        }
      });

      const examId = this._getExamIdFromRoute();
      const user = this.getView().getModel("user").getData();
      const userId = user.id;

      ExamService.submitExamAnswers(examId, userId, answers)
        .then(() => {
          MessageBox.success(isAutoSubmit ? "Exam auto-submitted." : "Exam submitted successfully.");
          setTimeout(() => {
            this.getRouter().navTo("employee-dashboard");
          }, 1000);
        })
        .catch(err => {
          MessageBox.error("Failed to submit exam: " + err.message);
        });
    },

    _getExamIdFromRoute: function () {
      const oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      const oHash = oRouter.getHashChanger().getHash();
      return oHash.split("/")[1];
    },

    onPreviousQuestion: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      if (index > 0) {
        index -= 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    }
  });
});*/
sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "exam/model/ExamService",
  "exam/model/AuthService"
], function (BaseController, MessageBox, ExamService, AuthService) {
  "use strict";

  let countdownInterval;

  return BaseController.extend("exam.controller.Exam", {
    _isExamActive: false, // Track if the exam is still in progress

    onInit: function () {
      // Attach the route handler immediately!
      const oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      oRouter.getRoute("exam").attachPatternMatched(this._onRouteMatched, this);

      // Secure Exam: Add event listeners
      this._onFullscreenChangeBound = this._onFullscreenChange.bind(this);
      document.addEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.addEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      this._onContextMenuBound = function(e) { e.preventDefault(); };
      document.addEventListener("contextmenu", this._onContextMenuBound);

      // Set an empty model immediately to prevent empty bindings
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");

      // Check authentication (async, but do NOT attach route handler here)
      AuthService.getCurrentUser()
        .then(user => {
          this.getView().setModel(new sap.ui.model.json.JSONModel(user), "user");
        })
        .catch(() => {
          MessageBox.error("Unauthorized access.");
          this.getRouter().navTo("login-employee");
        });
    },

    onExit: function() {
      // Remove event listeners
      document.removeEventListener("fullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("webkitfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("mozfullscreenchange", this._onFullscreenChangeBound);
      document.removeEventListener("MSFullscreenChange", this._onFullscreenChangeBound);
      document.removeEventListener("contextmenu", this._onContextMenuBound);
    },

    _requestFullscreen: function() {
      const elem = document.documentElement;
      if (elem.requestFullscreen) {
        elem.requestFullscreen();
      } else if (elem.mozRequestFullScreen) { // Firefox
        elem.mozRequestFullScreen();
      } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera
        elem.webkitRequestFullscreen();
      } else if (elem.msRequestFullscreen) { // IE/Edge
        elem.msRequestFullscreen();
      }
    },

    _onFullscreenChange: function() {
      // If not in fullscreen, auto-submit only if exam is active
      if (
        !document.fullscreenElement &&
        !document.webkitFullscreenElement &&
        !document.mozFullScreenElement &&
        !document.msFullscreenElement
      ) {
        if (this._isExamActive) {
          sap.m.MessageBox.warning("You exited fullscreen. The exam will be auto-submitted.");
          this.onSubmitExam(true);
        }
      }
    },

    _onRouteMatched: function (oEvent) {
  // Reset model to empty
  this.getView().setModel(new sap.ui.model.json.JSONModel({
    questions: [],
    currentIndex: 0,
    currentQuestion: {},
    timeLeft: 900
  }), "questions");

  const examId = oEvent.getParameter("arguments").examId; // <-- Move this up!
  const that = this;

  console.log("Exam ID:", examId);

  ExamService.getExamQuestions(examId)
    .then(data => {
      console.log("Questions data:", data);
      if (!Array.isArray(data) || data.length === 0) {
        MessageBox.warning("No questions found.");
        that._initEmptyModel();
        return;
      }

      data.forEach((q, index) => {
        q.index = index;
        q.status = "notAnswered";
        // Normalize is_msq to boolean
        q.is_msq = q.is_msq === true || q.is_msq === 1 || q.is_msq === "1" || q.is_msq === "true";
        if (q.is_msq) {
          q.selectedIndices = [];
          q.selectedIndex = -1;
        } else {
          q.selectedIndex = -1;
          q.selectedIndices = [];
        }
      });

      const model = new sap.ui.model.json.JSONModel({
        questions: data,
        currentIndex: 0,
        currentQuestion: data[0],
        timeLeft: 900
      });

      // Automatically update currentQuestion when currentIndex changes
      model.attachPropertyChange(function (e) {
        if (e.getParameter("path") === "/currentIndex") {
          const index = e.getParameter("value");
          const all = model.getProperty("/questions");
          model.setProperty("/currentQuestion", all[index]);
        }
      });

      that.getView().setModel(model, "questions");
      that._startCountdown();

      // --- Secure Exam: Request fullscreen after questions are loaded ---
      that._isExamActive = true; // Exam is now active
      that._requestFullscreen();
    })
    .catch(() => {
      MessageBox.error("Failed to load exam.");
      that._initEmptyModel();
    });
},

    _initEmptyModel: function () {
      this.getView().setModel(new sap.ui.model.json.JSONModel({
        questions: [],
        currentIndex: 0,
        currentQuestion: {},
        timeLeft: 900
      }), "questions");
    },

    _startCountdown: function () {
      const that = this;
      const model = this.getView().getModel("questions");
      if (!model) return;

      countdownInterval = setInterval(() => {
        const timeLeft = model.getProperty("/timeLeft");
        if (timeLeft <= 0) {
          clearInterval(countdownInterval);
          MessageBox.warning("Time is up! Auto-submitting exam.");
          that.onSubmitExam(true);
        } else {
          model.setProperty("/timeLeft", timeLeft - 1);
        }
      }, 1000);
    },

    onSelectAnswer: function (oEvent) {
      const model = this.getView().getModel("questions");
      const selectedIndex = oEvent.getParameter("selectedIndex");
      const index = model.getProperty("/currentIndex");

      model.setProperty(`/questions/${index}/selectedIndex`, selectedIndex);
      model.setProperty(`/questions/${index}/status`, "answered");
      model.setProperty("/currentQuestion/selectedIndex", selectedIndex);
      model.setProperty("/currentQuestion/status", "answered");
    },

    onSelectMSQOption: function (oEvent) {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const key = parseInt(oEvent.getSource().data("key"), 10);
      const isSelected = oEvent.getParameter("selected");

      let selectedIndices = model.getProperty(`/questions/${index}/selectedIndices`) || [];

      // Always create a new array to trigger UI update
      if (isSelected) {
        if (!selectedIndices.includes(key)) {
          selectedIndices = selectedIndices.concat([key]);
        }
      } else {
        selectedIndices = selectedIndices.filter(i => i !== key);
      }

      model.setProperty(`/questions/${index}/selectedIndices`, selectedIndices);
      model.setProperty("/currentQuestion/selectedIndices", selectedIndices);

      // Update status
      const status = selectedIndices.length > 0 ? "answered" : "notAnswered";
      model.setProperty(`/questions/${index}/status`, status);
      model.setProperty("/currentQuestion/status", status);
    },

    onSaveNext: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      // Check if current question is answered (for both MCQ and MSQ)
      const currentQuestion = questions[index];
      const isAnswered = currentQuestion.is_msq ? 
        (currentQuestion.selectedIndices && currentQuestion.selectedIndices.length > 0) :
        (currentQuestion.selectedIndex !== -1);

      if (isAnswered) {
        questions[index].status = "answered";
      }

      // Update full questions array to trigger UI refresh
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onMarkForReview: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      questions[index].status = "markedForReview";
      model.setProperty("/questions", questions);

      if (index < questions.length - 1) {
        index += 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    },

    onClearAnswer: function () {
      const model = this.getView().getModel("questions");
      const index = model.getProperty("/currentIndex");
      const currentQuestion = model.getProperty("/currentQuestion");

      if (currentQuestion.is_msq) {
        model.setProperty(`/questions/${index}/selectedIndices`, []);
        model.setProperty("/currentQuestion/selectedIndices", []);
      } else {
        model.setProperty(`/questions/${index}/selectedIndex`, -1);
        model.setProperty("/currentQuestion/selectedIndex", -1);
      }
      
      model.setProperty(`/questions/${index}/status`, "notAnswered");
      model.setProperty("/currentQuestion/status", "notAnswered");
    },

    onNavigateToQuestion: function (oEvent) {
      const index = oEvent.getSource().data("questionIndex");
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      model.setProperty("/currentIndex", index);
      model.setProperty("/currentQuestion", questions[index]);
    },

    onSubmitExam: function (isAutoSubmit = false) {
      if (!this._isExamActive) return; // Prevent double submit
      this._isExamActive = false;
      clearInterval(countdownInterval);
      const model = this.getView().getModel("questions");
      const questions = model.getProperty("/questions");

      if (!Array.isArray(questions) || questions.length === 0) {
        MessageBox.error("No questions to submit.");
        return;
      }

      const answers = questions.map(q => {
        if (q.is_msq) {
          // For MSQ: convert selected indices to option letters (A, B, C, D)
          const optionMap = ["A", "B", "C", "D"];
          const selected = (q.selectedIndices || []).map(i => optionMap[i]);
          return { question_id: q.id, answer: selected }; // answer is an array
        } else {
          // For MCQ: convert selected index to option letter
          let answer = null;
          if (q.selectedIndex === 0) answer = "A";
          if (q.selectedIndex === 1) answer = "B";
          if (q.selectedIndex === 2) answer = "C";
          if (q.selectedIndex === 3) answer = "D";
          return { question_id: q.id, answer };
        }
      });

      const examId = this._getExamIdFromRoute();
      const user = this.getView().getModel("user").getData();
      const userId = user.id;

      ExamService.submitExamAnswers(examId, userId, answers)
        .then(() => {
          // Exit fullscreen if still in fullscreen
          if (
            document.fullscreenElement ||
            document.webkitFullscreenElement ||
            document.mozFullScreenElement ||
            document.msFullscreenElement
          ) {
            if (document.exitFullscreen) document.exitFullscreen();
            if (document.webkitExitFullscreen) document.webkitExitFullscreen();
            if (document.mozCancelFullScreen) document.mozCancelFullScreen();
            if (document.msExitFullscreen) document.msExitFullscreen();
          }
          MessageBox.success(isAutoSubmit ? "Exam auto-submitted." : "Exam submitted successfully.");
          setTimeout(() => {
            this.getRouter().navTo("employee-dashboard");
          }, 1000);
        })
        .catch(err => {
          MessageBox.error("Failed to submit exam: " + err.message);
        });
    },

    _getExamIdFromRoute: function () {
      const oRouter = sap.ui.core.UIComponent.getRouterFor(this);
      const oHash = oRouter.getHashChanger().getHash();
      return oHash.split("/")[1];
    },

    onPreviousQuestion: function () {
      const model = this.getView().getModel("questions");
      let index = model.getProperty("/currentIndex");
      const questions = model.getProperty("/questions");

      if (index > 0) {
        index -= 1;
        model.setProperty("/currentIndex", index);
        model.setProperty("/currentQuestion", questions[index]);
      }
    }
  });
});
</file>

<file path="webapp/manifest.json">
{
  "_version": "1.12.0",
  "sap.app": {
    "id": "exam",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "applicationVersion": {
      "version": "${version}"
    },
    "sourceTemplate": {
      "id": "generator-ui5-app",
      "version": "1.1.0",
      "toolsId": "8882ec92-3ee3-4634-aeb1-22a86fe3e80a"
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {},
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "rootView": {
      "viewName": "exam.view.App",
      "type": "XML",
      "id": "app"
    },
    "dependencies": {
      "minUI5Version": "1.136.2",
      "libs": {
        "sap.ui.core": {},
        "sap.m": {},
        "sap.viz": {},
        "sap.ui.unified": {}

      }
    },
    "handleValidation": true,
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "exam.i18n.i18n",
          "supportedLocales": [
            "en",
            "de"
          ],
          "fallbackLocale": "en",
          "async": true
        }
      }
    },
    "routing": {
      "config": {
        "routerClass": "sap.m.routing.Router",
        "viewType": "XML",
        "viewPath": "exam.view",
        "controlId": "app",
        "controlAggregation": "pages"
      },
      "routes": [
        { "pattern": "login-admin", "name": "login-admin", "target": "loginAdmin" },
        { "pattern": "login-employee", "name": "login-employee", "target": "loginEmployee" },
        { "pattern": "admin-dashboard", "name": "admin-dashboard", "target": "adminDashboard" },
        { "pattern": "employee-dashboard", "name": "employee-dashboard", "target": "employeeDashboard" },
        { "pattern": "exam/{examId}", "name": "exam", "target": "exam" },
        { "pattern": "super-admin-dashboard", "name": "super-admin-dashboard", "target": "superAdminDashboard" },
        {
          "pattern": "",
          "name": "main",
          "target": "main"
        },
        {
  "pattern": "analytics-dashboard",
  "name": "analytics-dashboard",
  "target": "analyticsDashboard"

},
{
  "pattern": "reset-password",
  "name": "reset-password",
  "target": "resetPassword"
}

      ],
      "targets": {
        "loginAdmin": { "viewName": "LoginAdmin", "viewId": "loginAdmin" },
        "loginEmployee": { "viewName": "LoginEmployee", "viewId": "loginEmployee" },
        "adminDashboard": { "viewName": "AdminDashboard", "viewId": "adminDashboard" },
        "employeeDashboard": { "viewName": "EmployeeDashboard", "viewId": "employeeDashboard" },
        "exam": { "viewName": "Exam", "viewId": "exam" },
        "superAdminDashboard": { "viewName": "SuperAdminDashboard", "viewId": "superAdminDashboard" },
        "main": {
          "viewId": "main",
          "viewName": "Main"
        },
        "analyticsDashboard": {
  "viewName": "AnalyticsDashboard",
  "viewId": "analyticsDashboard"
},
        "resetPassword": {
          "viewName": "ResetPassword",
          "viewId": "resetPassword"
        }
      }
    }
  }
}
</file>

<file path="webapp/view/AdminDashboard.view.xml">
<mvc:View
  controllerName="exam.controller.AdminDashboard"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:core="sap.ui.core"
  displayBlock="true">
  <ScrollContainer vertical="true" height="100%" width="100%">
  <VBox>
  <Button text="Create Announcement" press="onOpenAnnouncementDialog" />

<Panel headerText="Create Announcement" class="sapUiSmallMargin">
  <VBox>
    <Label text="Title" />
    <Input id="announceTitle" placeholder="Enter title" />

    <Label text="Message" />
    <TextArea id="announceMessage" rows="4" placeholder="Write announcement..." />

    <Button text="Post Announcement"
            press=".onPostAnnouncement"
            type="Emphasized"
            class="sapUiSmallMarginTop"/>
  </VBox>
</Panel>

  <HBox>
    <!-- Sidebar -->
    <VBox width="220px" class="adminSidebar" style="background:#f8f8f8; border-radius:20px; min-height:100vh;">
      <Avatar src="path/to/avatar.jpg" displaySize="L" class="sapUiMediumMarginTop"/>
      <Text text="{user>name}" class="sidebarName sapUiTinyMarginTop"/>
      <Text text="{user>role}" class="sidebarRole sapUiTinyMarginBottom"/>
      <List>
        <StandardListItem icon="sap-icon://home" title="Dashboard" type="Active"/>
        <StandardListItem icon="sap-icon://bar-chart" title="Analytics" type="Active" press="onGoToAnalytics"/>
        <StandardListItem icon="sap-icon://question-mark" title="Question Bank" type="Active" press="onGoToQuestionBank"/>
        <StandardListItem icon="sap-icon://log" title="Logout" type="Active" press="onLogout"/>
      </List>
    </VBox>

    <!-- Main Content -->
    <VBox width="100%" class="adminMainContent" style="padding:32px;">
      <HBox justifyContent="SpaceBetween" alignItems="Center">
        <Title text="Dashboard" level="H1"/>
        
      </HBox>

      <!-- Stats Cards -->
      <HBox class="statsRow" wrap="Wrap" style="margin-top:24px;">
        <VBox class="statCard" style="background:#fff; border-radius:16px; box-shadow:0 2px 8px #eee; padding:16px; margin:8px;">
          <Text text="Total Exams"/>
          <ObjectNumber number="{dashboardModel>/examCount}" unit=""/>
        </VBox>
        <VBox class="statCard" style="background:#fff; border-radius:16px; box-shadow:0 2px 8px #eee; padding:16px; margin:8px;">
          <Text text="Total Questions"/>
          <ObjectNumber number="{dashboardModel>/questionCount}" unit=""/>
        </VBox>
        <VBox class="statCard" style="background:#fff; border-radius:16px; box-shadow:0 2px 8px #eee; padding:16px; margin:8px;">
          <Text text="Assigned Questions"/>
          <ObjectNumber number="{dashboardModel>/assignedCount}" unit=""/>
        </VBox>
        <VBox class="statCard" style="background:#fff; border-radius:16px; box-shadow:0 2px 8px #eee; padding:16px; margin:8px;">
          <Text text="Pending Exams"/>
          <ObjectNumber number="{dashboardModel>/pendingCount}" unit=""/>
        </VBox>
      </HBox>

      <!-- Admin Actions -->
      <Panel headerText="Admin Actions" class="sapUiSmallMarginTop">
        <HBox>
          <Button text="Create Exam" press="onOpenCreateExamDialog" type="Emphasized" class="sapUiTinyMarginEnd"/>
          <Button text="Add Question" press="onOpenAddQuestionDialog" type="Emphasized" class="sapUiTinyMarginEnd"/>
          <Button text="Assign Exam" press="onOpenAssignExamDialog" type="Emphasized" class="sapUiTinyMarginEnd"/>
          <Button text="View Results" press="onOpenResultsDialog" type="Emphasized"/>
        </HBox>
      </Panel>

      <!-- Dashboard Table -->
      <Panel headerText="Dashboard Table" class="sapUiSmallMarginTop">
        <Table id="dashboardTable" items="{tableModel>/}">
          <columns>
            <Column><Text text="Name" /></Column>
            <Column><Text text="Email" /></Column>
            <Column><Text text="Role" /></Column>
            <Column><Text text="Exam Title" /></Column>
            <Column><Text text="Attempted" /></Column>
          </columns>
          <items>
            <ColumnListItem>
              <cells>
                <Text text="{tableModel>name}" />
                <Text text="{tableModel>email}" />
                <Text text="{tableModel>role}" />
                <Text text="{tableModel>title}" />
                <Text text="{tableModel>attempted}" />
              </cells>
            </ColumnListItem>
          </items>
        </Table>
      </Panel>

      <!-- Exams Table -->
      <Panel headerText="Exams" class="sapUiSmallMarginTop">
        <Table items="{exams>/}">
          <columns>
            <Column><Text text="ID"/></Column>
            <Column><Text text="Title"/></Column>
            <Column><Text text="Start Date"/></Column>
            <Column><Text text="End Date"/></Column>
          </columns>
          <items>
            <ColumnListItem>
              <cells>
                <Text text="{exams>id}"/>
                <Text text="{exams>title}"/>
                <Text text="{exams>start_date}"/>
                <Text text="{exams>end_date}"/>
              </cells>
            </ColumnListItem>
          </items>
        </Table>
      </Panel>
    </VBox>
  </HBox>
  </VBox>
</ScrollContainer>
</mvc:View>
</file>

<file path="webapp/view/SuperAdminDashboard.view.xml">
<mvc:View
  controllerName="exam.controller.SuperAdminDashboard"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:core="sap.ui.core"
  displayBlock="true">

  <HBox>
    <!-- Sidebar -->
    <VBox width="240px" class="superAdminSidebar">
      <Avatar initials="{user>name}" displaySize="L" class="sapUiMediumMarginTop"/>
      <Text text="{user>name}" class="sidebarName sapUiTinyMarginTop"/>
      <Text text="{user>role}" class="sidebarRole sapUiTinyMarginBottom"/>
      <List>
        <StandardListItem icon="sap-icon://home" title="Dashboard" type="Active" press="onGoToAdminDashboard"/>
        <StandardListItem icon="sap-icon://bar-chart" title="Analytics" type="Active" press="onGoToAnalytics"/>
        <StandardListItem icon="sap-icon://add-employee" title="Add Employee" type="Active" press="onOpenAddEmployeeDialog"/>
        <StandardListItem icon="sap-icon://log" title="Logout" type="Active" press="onLogout"/>
      </List>
    </VBox>

    <!-- Main Content -->
    <VBox width="100%" class="superAdminMainContent">
      <HBox justifyContent="SpaceBetween" alignItems="Center">
        <Title text="Super Admin Dashboard" level="H1"/>
        <!-- Optional: Banner or notification -->
        <Panel headerText="Welcome, Super Admin!" class="welcomeBanner">
          <Text text="Manage users, permissions, and more."/>
        </Panel>
      </HBox>

      <!-- Stats Cards -->
      <HBox class="statsRow" wrap="Wrap">
        <VBox class="statCard">
          <Text text="Total Users"/>
          <ObjectNumber number="{dashboardModel>/userCount}" unit=""/>
        </VBox>
        <VBox class="statCard">
          <Text text="Total Permissions"/>
          <ObjectNumber number="{dashboardModel>/permissionCount}" unit=""/>
        </VBox>
        <VBox class="statCard">
          <Text text="Admins"/>
          <ObjectNumber number="{dashboardModel>/adminCount}" unit=""/>
        </VBox>
        <VBox class="statCard">
          <Text text="Employees"/>
          <ObjectNumber number="{dashboardModel>/employeeCount}" unit=""/>
        </VBox>
      </HBox>

      <!-- Users and Permissions Table -->
      <Panel headerText="Users and Permissions" class="sapUiSmallMarginTop">
       <Table items="{dashboardModel>/users}">
  <columns>
    <Column><Text text="Name" /></Column>
    <Column><Text text="Email" /></Column>
    <Column><Text text="Role" /></Column>
    <Column><Text text="Permissions" /></Column>
    <Column><Text text="Actions" /></Column>
  </columns>
  <items>
    <ColumnListItem>
      <cells>
        <Text text="{dashboardModel>name}" />
        <Text text="{dashboardModel>email}" />
        <Text text="{dashboardModel>role}" />
        <Text text="{path: 'dashboardModel>permissions', formatter: '.formatPermissions'}" />
        <Button text="Manage" press="onManagePermissions" type="Emphasized"/>
      </cells>
    </ColumnListItem>
  </items>
</Table>
      </Panel>

      <!-- Permission Management Panel -->
     <Panel headerText="Permission Management" class="sapUiSmallMarginTop">
  <VBox>
    <HBox class="sapUiTinyMarginBottom">
      <Label text="Selected User:" class="sapUiTinyMarginEnd" />
      <Text text="{dashboardModel>/selectedUser/name}" class="sapUiTinyMarginEnd" />
      <Text text="({dashboardModel>/selectedUser/email})" />
    </HBox>
    <HBox class="sapUiTinyMarginBottom">
      <Label text="Available Permissions:" class="sapUiTinyMarginEnd" />
      <Select
        id="permissionSelect"
        items="{dashboardModel>/permissions}"
        class="sapUiTinyMarginEnd">
        <core:Item key="{dashboardModel>id}" text="{dashboardModel>name}" />
      </Select>
      <Button text="Assign" press="onAssignPermission" type="Accept" class="sapUiTinyMarginEnd"/>
      <Button text="Remove" press="onRemovePermission" type="Reject"/>
    </HBox>
    <Label text="Current Permissions:" class="sapUiTinyMarginTop" />
    <List items="{dashboardModel>/selectedUser/permissions}" class="sapUiTinyMarginTop">
      <StandardListItem title="{dashboardModel>name}" />
    </List>
  </VBox>
</Panel>
    </VBox>
  </HBox>
</mvc:View>
</file>

<file path="webapp/controller/SuperAdminDashboard.controller.js">
sap.ui.define([
  "exam/controller/BaseController",
  "exam/model/AuthService",
  "exam/model/PermissionService",
  "sap/m/MessageBox"
], function (BaseController, AuthService, PermissionService, MessageBox) {
  "use strict";

  return BaseController.extend("exam.controller.SuperAdminDashboard", {
    onInit: function () {
      AuthService.getCurrentUser()
        .then(function (user) {
          if (!user || String(user.role).toLowerCase() !== "super_admin") {
            MessageBox.error("Only Super Admins can access this dashboard.");
            this.getOwnerComponent().getRouter().navTo("login-admin");
            return;
          }
          this.getView().setModel(new sap.ui.model.json.JSONModel(user), "user");
          this.getView().setModel(new sap.ui.model.json.JSONModel({}), "dashboardModel");
          this.loadDashboardStats();
          this.loadData();
        }.bind(this))
        .catch(function () {
          MessageBox.error("Unauthorized. Please log in again.");
          this.getOwnerComponent().getRouter().navTo("login-admin");
        }.bind(this));
    },

    loadDashboardStats: function () {
      const that = this;
      fetch("http://localhost:4000/api/dashboard/stats", { credentials: "include" })
        .then(res => res.json())
        .then(data => {
          const model = that.getView().getModel("dashboardModel");
          model.setProperty("/userCount", data.userCount);
          model.setProperty("/permissionCount", data.permissionCount);
          model.setProperty("/adminCount", data.adminCount);
          model.setProperty("/employeeCount", data.employeeCount);
        })
        .catch(err => {
          MessageBox.error("Failed to load dashboard stats: " + err.message);
        });
    },

    loadData: function () {
      const that = this;
      const model = that.getView().getModel("dashboardModel");

      PermissionService.getAllUsersWithPermissions()
        .then(function (users) {
          model.setProperty("/users", users);
        })
        .catch(function (err) {
          if (err && err.status === 403) {
            MessageBox.error("Forbidden: You do not have access to view users. Please log in as Super Admin.");
          } else {
            MessageBox.error("Failed to load users: " + err.message);
          }
        });

      PermissionService.getAllPermissions()
        .then(function (permissions) {
          model.setProperty("/permissions", permissions);
        })
        .catch(function (err) {
          if (err && err.status === 403) {
            MessageBox.error("Forbidden: You do not have access to permissions. Please log in as Super Admin.");
          } else {
            MessageBox.error("Failed to load permissions: " + err.message);
          }
        });
    },

    onManagePermissions: function (oEvent) {
      const oContext = oEvent.getSource().getParent().getBindingContext("dashboardModel");
      if (!oContext) {
        sap.m.MessageBox.error("No user context found.");
        return;
      }
      const user = oContext.getObject();
      const userId = user.id || user.userId;
      if (!userId) {
        sap.m.MessageBox.error("User ID missing for permission lookup.");
        return;
      }

      PermissionService.getUserPermissions(userId)
        .then(function (permissions) {
          const model = this.getView().getModel("dashboardModel");
          model.setProperty("/selectedUser", Object.assign({}, user, { permissions: permissions }));
        }.bind(this))
        .catch(function (err) {
          MessageBox.error("Failed to load user permissions: " + err.message);
        });
    },

    onAssignPermission: function () {
      const model = this.getView().getModel("dashboardModel");
      const selectedUser = model.getProperty("/selectedUser");
      const permissionId = this.byId("permissionSelect").getSelectedKey();

      const userId = selectedUser && (selectedUser.id || selectedUser.userId);
      if (!userId) {
        sap.m.MessageBox.warning("Please select a user first.");
        return;
      }
      if (!permissionId) {
        sap.m.MessageBox.warning("Please select a permission to assign.");
        return;
      }

      PermissionService.assignPermission(userId, permissionId)
        .then(function () {
          sap.m.MessageBox.success("Permission assigned successfully!");
          this.onManagePermissions({
            getSource: function () {
              return {
                getParent: function () {
                  return {
                    getBindingContext: function () {
                      return { getObject: function () { return selectedUser; } };
                    }
                  };
                }
              };
            }
          });
          this.loadData();
        }.bind(this))
        .catch(function (err) {
          sap.m.MessageBox.error("Failed to assign permission: " + err.message);
        });
    },

    onRemovePermission: function () {
      const model = this.getView().getModel("dashboardModel");
      const selectedUser = model.getProperty("/selectedUser");
      const permissionId = this.byId("permissionSelect").getSelectedKey();

      const userId = selectedUser && (selectedUser.id || selectedUser.userId);
      if (!userId) {
        MessageBox.warning("Please select a user first.");
        return;
      }
      if (!permissionId) {
        MessageBox.warning("Please select a permission to remove.");
        return;
      }

      PermissionService.removePermission(userId, permissionId)
        .then(function () {
          MessageBox.success("Permission removed successfully!");
          this.onManagePermissions({
            getSource: function () {
              return {
                getParent: function () {
                  return {
                    getBindingContext: function () {
                      return { getObject: function () { return selectedUser; } };
                    }
                  };
                }
              };
            }
          });
          this.loadData();
        }.bind(this))
        .catch(function (err) {
          MessageBox.error("Failed to remove permission: " + err.message);
        }.bind(this));
    },

    onRefreshData: function () {
      this.loadData();
      MessageBox.success("Data refreshed successfully!");
    },

    onGoToAdminDashboard: function () {
      this.getRouter().navTo("admin-dashboard");
    },

    onGoToAnalytics: function () {
      this.getRouter().navTo("analytics-dashboard");
    },

    onLogout: function () {
      AuthService.logout()
        .then(function () { this.getRouter().navTo("login-admin"); }.bind(this))
        .catch(function (err) { MessageBox.error("Logout failed: " + err.message); });
    },

    formatPermissions: function (permissions) {
      if (!permissions || !permissions.length) { return ""; }
      return permissions.map(function (p) { return typeof p === "string" ? p : p.name; }).join(", ");
    }
  });
});
</file>

<file path="webapp/index.html">
<!DOCTYPE html>
<html lang="en">
  <!-- Google Fonts -->


<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <title>Secure Exam App</title>

  <!-- Link your custom CSS files -->
  <link rel="stylesheet" href="css/custom.css?v=2" />
  <!-- If you have other CSS files like superadmin.css, link them here too -->
  <!-- <link rel="stylesheet" href="css/superadmin.css" /> -->

  <style>
    /* Ensure html and body take full height and width */
    html, body {
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
      box-sizing: border-box; /* Include padding and border in element's total width and height */
      overflow: hidden; /* Prevent body scrolling if content is centered */
    }

    /* Target the main UI5 component container and make it a flex parent */
    /* This is the div where your entire UI5 app is injected by ComponentSupport */
    .app-root-container {
      height: 100vh; /* Use viewport height to ensure it fills the screen */
      width: 100vw;  /* Use viewport width to ensure it fills the screen */
      display: flex;
      justify-content: center; /* Center horizontally */
      align-items: center;     /* Center vertically */
      /* This background will cover the entire browser window */
      background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
      padding: 0;
      margin: 0;
    }
  </style>

  <script>
    // Script to handle URL parameters for JWT, userId, and role (keep this if you need it)
    (function () {
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get("token");
      const userId = urlParams.get("userId");
      const role = urlParams.get("role");
      if (token) localStorage.setItem("jwt", token);
      if (userId) localStorage.setItem("userId", userId);
      if (role) localStorage.setItem("role", role);
    })();
  </script>

  <!-- SAP UI5 Bootstrap -->
  <!-- This script loads the UI5 core library and configures your app -->
  <script
    id="sap-ui-bootstrap"
    src="resources/sap-ui-core.js"
    data-sap-ui-theme="sap_horizon"
    data-sap-ui-resourceroots='{
      "exam": "."
    }'
    data-sap-ui-oninit="module:sap/ui/core/ComponentSupport"
    data-sap-ui-compatVersion="edge"
    data-sap-ui-async="true"
    data-sap-ui-preload="async"
    data-sap-ui-libs="sap.m"
  ></script>
</head>

<body class="sapUiBody sapUiSizeCompact" id="content">
  <!-- This div is where your SAP UI5 component (your app) will be rendered -->
  <!-- The 'app-root-container' class is crucial for the full-screen centering -->
  <div
    data-sap-ui-component
    data-name="exam"
    data-id="container"
    data-settings='{"id" : "exam"}'
    data-handle-validation="true"
    class="app-root-container"
  ></div>
</body>
</html>
</file>

<file path="webapp/view/EmployeeDashboard.view.xml">
<mvc:View controllerName="exam.controller.EmployeeDashboard"
  xmlns="sap.m"
  xmlns:mvc="sap.ui.core.mvc"
  xmlns:core="sap.ui.core"
  xmlns:unified="sap.ui.unified"
  displayBlock="true">

  <HBox class="employeeDashboardRoot">
    <!-- Sidebar -->
    <VBox class="employeeSidebar" width="220px">
      <Avatar initials="{user>name}" displaySize="L" class="employeeAvatar"/>
      <Text text="Hi, {user>name}" class="employeeSidebarName"/>
      <List mode="None" class="employeeSidebarList">
        <StandardListItem icon="sap-icon://home" title="Dashboard" type="Inactive"/>
        <StandardListItem icon="sap-icon://education" title="My Exams" type="Active" press="onGoToUnattempted"/>
        <StandardListItem icon="sap-icon://business-objects-experience" title="Results" type="Active" press="onGoToResults"/>
        <StandardListItem icon="sap-icon://key" title="Change Password" type="Active" press="onOpenChangePasswordDialog"/>
        <StandardListItem icon="sap-icon://log" title="Logout" type="Active" press="onLogout"/>
      </List>
    </VBox>

    <!-- Main Content -->
    <VBox class="employeeMainContent" width="100%">
      <!-- Header -->
      <HBox class="employeeHeaderBar" alignItems="Center" justifyContent="SpaceBetween">
        <VBox>
          <Text text="Welcome, {user>name}!" class="employeeWelcome"/>
          <Text text="Role: {user>role} | Email: {user>email}" class="employeeDetails"/>
        </VBox>

        <HBox alignItems="Center" gap="1rem">
          <Avatar initials="{user>name}" displaySize="M"/>
          <Button text="Edit Profile" icon="sap-icon://edit" press="onEditProfile"/>
        </HBox>
      
 <FlexBox direction="Row" alignItems="Start" styleClass="bellContainer">
  <Button
    icon="sap-icon://bell"
    type="Transparent"
    press="onOpenAnnouncementDialog"
    id="bellButton" />
    
  <core:Icon
    visible="{= ${headerModel>/hasUnread} }"
    src="sap-icon://circle-task"
    size="0.5rem"
    color="red"
    styleClass="redDot" />
</FlexBox>




      </HBox>
     <!-- Notification Message -->
      <MessageStrip text="Your next exam is scheduled soon. Check 'My Exams' for details." type="Information"/>

      <!-- Cards Grid -->
      <HBox class="employeeCardsRow" wrap="Wrap" renderType="Bare">
        <!-- Unattempted Exams Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://education" size="2.5rem"/>
          <Text text="Unattempted Exams" class="cardTitle"/>
          <Text text="{= ${exams>/unattempted} ? ${exams>/unattempted}.length + ' pending' : 'Loading...'}"/>
          <Button text="View" press="onGoToUnattempted"/>
        </VBox>
        <!-- Attempted Exams Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://accept" size="2.5rem"/>
          <Text text="Attempted Exams" class="cardTitle"/>
          <Text text="{= ${exams>/attempted} ? ${exams>/attempted}.length + ' completed' : 'Loading...'}"/>
          <Button text="View" press="onGoToAttempted"/>
        </VBox>
        <!-- Results Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://business-objects-experience" size="2.5rem"/>
          <Text text="Results" class="cardTitle"/>
          <Text text="Check your exam results."/>
          <Button text="View Results" press="onGoToResults"/>
        </VBox>
      
        <!-- Total Exams Assigned Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://number-sign" size="2.5rem"/>
          <Text text="Total Exams Assigned" class="cardTitle"/>
          <Text text="{= ${exams>/unattempted}.length + ${exams>/attempted}.length }"/>
        </VBox>
        <!-- Subject-wise Breakdown Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://pie-chart" size="2.5rem"/>
          <Text text="Subject-wise Breakdown" class="cardTitle"/>
          <List items="{exams>/subjectBreakdown}" class="subjectBreakdownList">
            <StandardListItem title="{exams>subject}" info="{exams>count}"/>
          </List>
        </VBox>
        <!-- Completion Progress Card -->
        <VBox class="employeeCard" width="260px">
          <core:Icon src="sap-icon://activity-individual" size="2.5rem"/>
          <Text text="Completion Progress" class="cardTitle"/>
          <ProgressIndicator
            percentValue="{= Math.round(100 * ${exams>/attempted}.length / (${exams>/attempted}.length + ${exams>/unattempted}.length)) }"
            displayValue="{= Math.round(100 * ${exams>/attempted}.length / (${exams>/attempted}.length + ${exams>/unattempted}.length)) + '%'}"
            state="Success"
          />
        </VBox>
        
      </HBox>
      <Panel headerText="Exam Calendar" expandable="true" expanded="true">
  <HBox>
    <unified:Calendar
      id="examCalendar"
      select="onCalendarSelect"
    />
    <VBox class="calendarResultsBox" width="100%" style="padding-left: 2rem;">
      <Text text="Exams on Selected Date" class="calendarTitle" />
      <List items="{calendarModel>/}">
        <StandardListItem title="{calendarModel>title}" info="{calendarModel>status}" />
      </List>
    </VBox>
  </HBox>
</Panel>


    </VBox>
    

  </HBox>
 
  <!-- Edit Profile Dialog -->
  <Dialog
    id="profileDialog"
    title="Edit Profile"
    draggable="true"
    resizable="true"
    contentWidth="400px"
  >
    <VBox>
      <Label text="Name"/>
      <Input value="{user>/name}" width="100%"/>
      <Label text="Email"/>
      <Input value="{user>/email}" width="100%"/>
      <!-- Add more fields as needed -->
    </VBox>
    <beginButton>
      <Button text="Save" type="Emphasized" press="onSaveProfile"/>
    </beginButton>
    <endButton>
      <Button text="Cancel" press="onCancelProfile"/>
    </endButton>
  </Dialog>
</mvc:View>
</file>

<file path="webapp/controller/AdminDashboard.controller.js">
/*sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "sap/m/Dialog",
  "sap/m/Button",
  "sap/m/Input",
  "sap/ui/model/json/JSONModel",
  "exam/model/ExamService",
  "exam/model/AuthService",
  "exam/model/PermissionChecker"
], function(BaseController, MessageBox, Dialog, Button, Input, JSONModel, ExamService, AuthService, PermissionChecker) {
  "use strict";

  /**
   *
   * @param user
   *//*
  function isSuperAdmin(user) {
    return user && user.role === "super_admin";
  }

  return BaseController.extend("exam.controller.AdminDashboard", {
    onInit: function () {
      const that = this;
      AuthService.getCurrentUser()
        .then(function(user) {
          if (!user) {
            MessageBox.error("User not authenticated. Please log in again.");
            that.getRouter().navTo("main");
            return;
          }
          const userModel = new sap.ui.model.json.JSONModel(user);
          that.getView().setModel(userModel, "user");
          const oModel = new sap.ui.model.json.JSONModel({});
          that.getView().setModel(oModel);
          return that.loadPermissionsAndSetupUI(user);
        })
        .catch(function(err) {
          MessageBox.error("Authentication failed: " + err.message);
          that.getRouter().navTo("main");
        });
        this.loadExams();
    },
    loadExams: function() {
    fetch("http://localhost:4000/api/exam/exams", { credentials: "include" })
      .then(res => res.json())
      .then((data) => {
        const examsModel = new sap.ui.model.json.JSONModel(data);
        this.getView().setModel(examsModel, "exams");
      });
  },

    loadPermissionsAndSetupUI: function(user) {
      const that = this;
      if (isSuperAdmin(user)) {
        return that.loadDashboardData();
      }
      return PermissionChecker.hasPermission(user.id, 'view_dashboard')
        .then(function(hasDashboardAccess) {
          if (!hasDashboardAccess) {
            MessageBox.error("Access denied. You don't have permission to view the dashboard.");
            that.getRouter().navTo("main");
            return;
          }
          return that.loadDashboardData();
        });
    },

    loadDashboardData: function() {
      const that = this;
      fetch("http://localhost:4000/api/dashboard/stats", { credentials: "include" })
        .then(res => res.json())
        .then(data => {
          const oModel = new sap.ui.model.json.JSONModel(data);
          that.getView().setModel(oModel, "dashboardModel");
        })
        .catch(err => console.error("Failed to load dashboard stats", err));
      // Optionally, handle users fetch if endpoint exists
      fetch("http://localhost:4000/api/users", { credentials: "include" })
        .then(res => {
          if (!res.ok) throw new Error("Users endpoint not found");
          return res.json();
        })
        .then(data => {
          const userModel = new sap.ui.model.json.JSONModel(data);
          that.getView().setModel(userModel, "users");
        })
        .catch(err => console.warn("Error loading users", err));
      const oTableModel = new JSONModel();
      that.getView().setModel(oTableModel, "tableModel");
      fetch("http://localhost:4000/api/dashboard/table", { credentials: "include" })
        .then(res => res.json())
        .then(data => {
          oTableModel.setData(data);
        })
        .catch(err => {
          console.error("Failed to load table data", err);
        });
    },

    onOpenCreateExamDialog: function() {
      const that = this;
      const userModel = this.getView().getModel("user");
      if (!userModel) {
        MessageBox.error("User information not loaded. Please log in again.");
        return;
      }
      const user = userModel.getData();
      if (isSuperAdmin(user)) {
        that._showCreateExamDialog();
        return;
      }
      PermissionChecker.hasPermission(user.id, 'create_exam')
        .then(function(hasPermission) {
          if (!hasPermission) {
            MessageBox.error("Access denied. You don't have permission to create exams.");
            return;
          }
          that._showCreateExamDialog();
        });
    },

    _showCreateExamDialog: function() {
      const that = this;
      const dialog = new Dialog({
        title: "Create Exam",
        content: [
          new Input("examTitle", { placeholder: "Title" }),
        new sap.m.ComboBox("examCategory", {
  placeholder: "Select Exam",
  items: {
    path: "exams>/",
    template: new sap.ui.core.Item({
      key: "{exams>id}",
      text: "{exams>title}"
    })
  }
}),
          new Input("examDescription", { placeholder: "Description" }),
          new Input("examDueDate", { placeholder: "Due Date (YYYY-MM-DD)" }),
          new sap.m.DatePicker("examStartDate", { placeholder: "Start Date" }),
          new sap.m.DatePicker("examEndDate", { placeholder: "End Date" }),
  

        ],
        beginButton: new Button({
          text: "Create",
          press: function() {
            const title = sap.ui.getCore().byId("examTitle").getValue();
            //const selectedExamId = sap.ui.getCore().byId("examCategory").getSelectedKey();
            const description = sap.ui.getCore().byId("examDescription").getValue();
            const dueDate = sap.ui.getCore().byId("examDueDate").getValue();
            const user = that.getView().getModel("user").getData();
            const createdBy = user.id;
            const startDate = sap.ui.getCore().byId("examStartDate").getValue();
            const endDate = sap.ui.getCore().byId("examEndDate").getValue();
            ExamService.createExam({ title, description, due_date: dueDate, created_by: createdBy, start_date: startDate, end_date: endDate})
              .then(() => MessageBox.success("Exam created!"))
              .catch(err => MessageBox.error("Error: " + err.message));
            dialog.close();
          }
        }),
        endButton: new Button({
          text: "Cancel",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },

    onOpenAddQuestionDialog: function() {
      const that = this;
      const userModel = this.getView().getModel("user");
      if (!userModel) {
        MessageBox.error("User information not loaded. Please log in again.");
        return;
      }
      const user = userModel.getData();
      if (isSuperAdmin(user)) {
        that._showAddQuestionDialog();
        return;
      }
      PermissionChecker.hasPermission(user.id, 'create_questions')
        .then(function(hasPermission) {
          if (!hasPermission) {
            MessageBox.error("Access denied. You don't have permission to create questions.");
            return;
          }
          that._showAddQuestionDialog();
        });
    },

    _showAddQuestionDialog: function() {
      const dialog = new Dialog({
        title: "Add Question",
        content: [
          new Input("questionExamId", { placeholder: "Exam ID" }),
          new Input("questionText", { placeholder: "Question Text" }),
          new Input("optionA", { placeholder: "Option A" }),
          new Input("optionB", { placeholder: "Option B" }),
          new Input("optionC", { placeholder: "Option C" }),
          new Input("optionD", { placeholder: "Option D" }),
          new Input("correctOption", { placeholder: "Correct Option (A/B/C/D)" })
        ],
        beginButton: new Button({
          text: "Add",
          press: function() {
            const exam_id = sap.ui.getCore().byId("questionExamId").getValue();
            const question_text = sap.ui.getCore().byId("questionText").getValue();
            const option_a = sap.ui.getCore().byId("optionA").getValue();
            const option_b = sap.ui.getCore().byId("optionB").getValue();
            const option_c = sap.ui.getCore().byId("optionC").getValue();
            const option_d = sap.ui.getCore().byId("optionD").getValue();
            const correct_option = sap.ui.getCore().byId("correctOption").getValue();
            ExamService.addQuestion({ exam_id, question_text, option_a, option_b, option_c, option_d, correct_option })
              .then(() => MessageBox.success("Question added!"))
              .catch(err => MessageBox.error("Error: " + err.message));
            dialog.close();
          }
        }),
        endButton: new Button({
          text: "Cancel",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },

    onOpenAssignExamDialog: function() {
      const that = this;
      const userModel = this.getView().getModel("user");
      if (!userModel) {
        MessageBox.error("User information not loaded. Please log in again.");
        return;
      }
      const user = userModel.getData();
      if (isSuperAdmin(user)) {
        that._showAssignExamDialog();
        return;
      }
      PermissionChecker.hasPermission(user.id, 'assign_exam')
        .then(function(hasPermission) {
          if (!hasPermission) {
            MessageBox.error("Access denied. You don't have permission to assign exams.");
            return;
          }
          that._showAssignExamDialog();
        });
    },

    _showAssignExamDialog: function() {
      const dialog = new Dialog({
        title: "Assign Exam",
        content: [
          new Input("assignExamId", { placeholder: "Exam ID" }),
          new Input("assignUserId", { placeholder: "User ID" }),
          new Input("assignEmail", { placeholder: "Employee Email" })
        ],
        beginButton: new Button({
          text: "Assign",
          press: function() {
            const exam_id = sap.ui.getCore().byId("assignExamId").getValue();
            const user_id = sap.ui.getCore().byId("assignUserId").getValue();
            const email = sap.ui.getCore().byId("assignEmail").getValue();
            ExamService.assignExam({ exam_id, user_id, email })
              .then(() => {
                MessageBox.success("Exam assigned!");
              })
              .catch(err => {
                MessageBox.error(err.error || err.message || "Could not assign exam.");
              });
            dialog.close();
          }
        }),
        endButton: new Button({
          text: "Cancel",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },

    onOpenResultsDialog: function() {
      const that = this;
      const userModel = this.getView().getModel("user");
      if (!userModel) {
        MessageBox.error("User information not loaded. Please log in again.");
        return;
      }
      const user = userModel.getData();
      if (isSuperAdmin(user)) {
        that._showResultsDialog();
        return;
      }
      PermissionChecker.hasPermission(user.id, 'view_results')
        .then(function(hasPermission) {
          if (!hasPermission) {
            MessageBox.error("Access denied. You don't have permission to view results.");
            return;
          }
          that._showResultsDialog();
        });
    },

    _showResultsDialog: function() {
      //const that = this;
      const examId = prompt("Enter Exam ID to view results:");
      if (!examId) return;
      ExamService.getAllExamResults(examId)
        .then(data => {
          const resultsText = data.map(r => r.name + ": " + r.score + "/" + r.total).join("\n");
          MessageBox.information(resultsText || "No results yet.");
        })
        .catch(err => MessageBox.error("Failed to load results: " + err.message));
    },
    onPostAnnouncement: function () {
  const title = this.byId("announceTitle").getValue().trim();
  const message = this.byId("announceMessage").getValue().trim();

  if (!title || !message) {
    sap.m.MessageBox.warning("Both title and message are required.");
    return;
  }

  fetch("http://localhost:4000/api/announcements", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ title, message })
  })
  .then(res => {
    if (!res.ok) {
      throw new Error("Failed to post announcement.");
    }
    return res.json();
  })
  .then(() => {
    sap.m.MessageToast.show("Announcement posted successfully!");
    this.byId("announceTitle").setValue("");
    this.byId("announceMessage").setValue("");
  })
  .catch(err => {
    console.error(err);
    sap.m.MessageBox.error("Error posting announcement.");
  });
}
,

    onLogout: function() {
      AuthService.logout()
        .then(function() {
          window.location.replace("http://localhost:8080/test/flpSandbox.html?sap-ui-xx-viewCache=false#app-tile");
        })
        .catch(function(err) {
          MessageBox.error("Logout failed: " + err.message);
        });
    }
  });
});*/
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "exam/model/AuthService",
    "exam/model/PermissionService",
    "exam/model/ExamService",
    "sap/m/MessageBox"
], function (Controller, AuthService, PermissionService, ExamService, MessageBox) {
    "use strict";

    return Controller.extend("exam.controller.AdminDashboard", {
        onInit: async function () {
            try {
                const user = await AuthService.getCurrentUser();

                // Expose the current user to the view for downstream checks
                this.getView().setModel(new sap.ui.model.json.JSONModel(user), "user");

                // Allow super admins full access to Admin Dashboard as well
                if (String(user.role).toLowerCase() === "super_admin") {
                    this._applyPermissions(["__ALL__"]);
                    return;
                }

                if (String(user.role).toLowerCase() !== "employee") {
                    MessageBox.error("Only employees can access Admin Dashboard.");
                    this.getOwnerComponent().getRouter().navTo("login-admin");
                    return;
                }

                // Prefer permissions coming from /auth/me (middleware attaches them)
                let permissions = Array.isArray(user.permissions) ? user.permissions : [];

                // Fallback: try fetching explicitly if we didn't get any, using either id or userId
                if (permissions.length === 0) {
                    const userId = user.id || user.userId;
                    if (!userId) {
                        console.warn("No user id found on current user.");
                    } else {
                        try {
                            permissions = await PermissionService.getUserPermissions(userId);
                        } catch (permErr) {
                            // If forbidden, keep empty and proceed; UI will hide restricted sections
                            console.warn("Failed to fetch user permissions", permErr);
                            permissions = [];
                        }
                    }
                }

                // Store permissions for later use
                this.getView().setModel(new sap.ui.model.json.JSONModel({ permissions }), "permModel");

                // Example: hide sections based on permissions
                this._applyPermissions(permissions);

            } catch (err) {
                console.error(err);
                MessageBox.error("Unauthorized. Please log in again.");
                this.getOwnerComponent().getRouter().navTo("login-admin");
            }
        },

        _applyPermissions: function (permissions) {
            // Super admin: show everything
            const userModel = this.getView().getModel("user");
            const role = userModel && userModel.getProperty("/role");
            if (String(role || "").toLowerCase() === "super_admin") {
                const examSection = this.byId("examSection");
                if (examSection) examSection.setVisible(true);
                const resultsSection = this.byId("resultsSection");
                if (resultsSection) resultsSection.setVisible(true);
                return;
            }

            // permissions may be array of strings or objects with name
            const permNames = permissions
                .map(function (p) { return (typeof p === "string" ? p : p.name) || ""; })
                .map(function (n) { return String(n).toLowerCase(); });

            // Example: if no "manage_exams" permission → hide exam management section
            if (!permNames.includes("manage_exams")) {
                const examSection = this.byId("examSection");
                if (examSection) examSection.setVisible(false);
            }
            if (!permNames.includes("view_results")) {
                const resultsSection = this.byId("resultsSection");
                if (resultsSection) resultsSection.setVisible(false);
            }
        }
        ,

        // === Actions ===
        onOpenCreateExamDialog: function() {
            const user = this.getView().getModel("user") && this.getView().getModel("user").getData();
            if (!user) { MessageBox.error("User not loaded."); return; }
            // Super admin shortcut
            if (String(user.role).toLowerCase() === "super_admin") { this._showCreateExamDialog(); return; }
            const permsModel = this.getView().getModel("permModel");
            const perms = permsModel ? permsModel.getProperty("/permissions") : [];
            const names = (perms || []).map(p => (typeof p === "string" ? p : p.name) || "").map(n => n.toLowerCase());
            if (!names.includes("create_exam") && !names.includes("manage_exams")) {
                MessageBox.error("Access denied. You don't have permission to create exams.");
                return;
            }
            this._showCreateExamDialog();
        },

        _showCreateExamDialog: function() {
            const that = this;
            const dialog = new sap.m.Dialog({
                title: "Create Exam",
                content: [
                    new sap.m.Input("examTitle", { placeholder: "Title" }),
                    new sap.m.Input("examDescription", { placeholder: "Description" }),
                    new sap.m.Input("examDueDate", { placeholder: "Due Date (YYYY-MM-DD)" }),
                    new sap.m.DatePicker("examStartDate", { placeholder: "Start Date" }),
                    new sap.m.DatePicker("examEndDate", { placeholder: "End Date" })
                ],
                beginButton: new sap.m.Button({
                    text: "Create",
                    press: function() {
                        const title = sap.ui.getCore().byId("examTitle").getValue();
                        const description = sap.ui.getCore().byId("examDescription").getValue();
                        const dueDate = sap.ui.getCore().byId("examDueDate").getValue();
                        const user = that.getView().getModel("user").getData();
                        const createdBy = user.id || user.userId;
                        const startDate = sap.ui.getCore().byId("examStartDate").getValue();
                        const endDate = sap.ui.getCore().byId("examEndDate").getValue();
                        ExamService.createExam({ title, description, due_date: dueDate, created_by: createdBy, start_date: startDate, end_date: endDate })
                            .then(() => MessageBox.success("Exam created!"))
                            .catch(err => MessageBox.error("Error: " + (err.message || err)));
                        dialog.close();
                    }
                }),
                endButton: new sap.m.Button({ text: "Cancel", press: function() { dialog.close(); } })
            });
            dialog.open();
        },

        onOpenAddQuestionDialog: function() {
            const user = this.getView().getModel("user") && this.getView().getModel("user").getData();
            if (!user) { MessageBox.error("User not loaded."); return; }
            if (String(user.role).toLowerCase() === "super_admin") { this._showAddQuestionDialog(); return; }
            const permsModel = this.getView().getModel("permModel");
            const perms = permsModel ? permsModel.getProperty("/permissions") : [];
            const names = (perms || []).map(p => (typeof p === "string" ? p : p.name) || "").map(n => n.toLowerCase());
            if (!names.includes("create_questions")) {
                MessageBox.error("Access denied. You don't have permission to create questions.");
                return;
            }
            this._showAddQuestionDialog();
        },

        _showAddQuestionDialog: function() {
            const dialog = new sap.m.Dialog({
                title: "Add Question",
                content: [
                    new sap.m.Input("questionExamId", { placeholder: "Exam ID" }),
                    new sap.m.Input("questionText", { placeholder: "Question Text" }),
                    new sap.m.Input("optionA", { placeholder: "Option A" }),
                    new sap.m.Input("optionB", { placeholder: "Option B" }),
                    new sap.m.Input("optionC", { placeholder: "Option C" }),
                    new sap.m.Input("optionD", { placeholder: "Option D" }),
                    new sap.m.Input("correctOption", { placeholder: "Correct Option (A/B/C/D)" })
                ],
                beginButton: new sap.m.Button({
                    text: "Add",
                    press: function() {
                        const payload = {
                            exam_id: sap.ui.getCore().byId("questionExamId").getValue(),
                            question_text: sap.ui.getCore().byId("questionText").getValue(),
                            option_a: sap.ui.getCore().byId("optionA").getValue(),
                            option_b: sap.ui.getCore().byId("optionB").getValue(),
                            option_c: sap.ui.getCore().byId("optionC").getValue(),
                            option_d: sap.ui.getCore().byId("optionD").getValue(),
                            correct_option: sap.ui.getCore().byId("correctOption").getValue()
                        };
                        ExamService.addQuestion(payload)
                            .then(() => sap.m.MessageBox.success("Question added!"))
                            .catch(err => sap.m.MessageBox.error("Error: " + (err.message || err)));
                        dialog.close();
                    }
                }),
                endButton: new sap.m.Button({ text: "Cancel", press: function() { dialog.close(); } })
            });
            dialog.open();
        },

        onOpenAssignExamDialog: function() {
            const user = this.getView().getModel("user") && this.getView().getModel("user").getData();
            if (!user) { MessageBox.error("User not loaded."); return; }
            if (String(user.role).toLowerCase() === "super_admin") { this._showAssignExamDialog(); return; }
            const permsModel = this.getView().getModel("permModel");
            const perms = permsModel ? permsModel.getProperty("/permissions") : [];
            const names = (perms || []).map(p => (typeof p === "string" ? p : p.name) || "").map(n => n.toLowerCase());
            if (!names.includes("assign_exam")) {
                MessageBox.error("Access denied. You don't have permission to assign exams.");
                return;
            }
            this._showAssignExamDialog();
        },

        _showAssignExamDialog: function() {
            const dialog = new sap.m.Dialog({
                title: "Assign Exam",
                content: [
                    new sap.m.Input("assignExamId", { placeholder: "Exam ID" }),
                    new sap.m.Input("assignUserId", { placeholder: "User ID" }),
                    new sap.m.Input("assignEmail", { placeholder: "Employee Email" })
                ],
                beginButton: new sap.m.Button({
                    text: "Assign",
                    press: function() {
                        const exam_id = sap.ui.getCore().byId("assignExamId").getValue();
                        const user_id = sap.ui.getCore().byId("assignUserId").getValue();
                        const email = sap.ui.getCore().byId("assignEmail").getValue();
                        ExamService.assignExam({ exam_id, user_id, email })
                            .then(() => sap.m.MessageBox.success("Exam assigned!"))
                            .catch(err => sap.m.MessageBox.error(err.error || err.message || "Could not assign exam."));
                        dialog.close();
                    }
                }),
                endButton: new sap.m.Button({ text: "Cancel", press: function() { dialog.close(); } })
            });
            dialog.open();
        },

        onOpenResultsDialog: function() {
            const that = this;
            const examId = prompt("Enter Exam ID to view results:");
            if (!examId) return;
            ExamService.getAllExamResults(examId)
                .then(function (data) {
                    const text = (data || []).map(function (r) { return r.name + ": " + r.score + "/" + r.total; }).join("\n");
                    sap.m.MessageBox.information(text || "No results yet.");
                })
                .catch(function (err) { sap.m.MessageBox.error("Failed to load results: " + (err.message || err)); });
        }
    });
});
</file>

<file path="webapp/controller/EmployeeDashboard.controller.js">
sap.ui.define([
  "./BaseController",
  "sap/m/MessageBox",
  "sap/ui/core/Fragment",
  "exam/model/ExamService",
  "exam/model/AuthService",
  "sap/ui/model/json/JSONModel"
  ], function (BaseController, MessageBox, Fragment, ExamService, AuthService, JSONModel) {
  "use strict";
  return BaseController.extend("exam.controller.EmployeeDashboard", {
    onInit: function () {
      const that = this;
      AuthService.getCurrentUser()
        .then(function(user) {
          // Add initials for avatar
          console.log("Current user:", user);
          user.initials = user.name ? user.name.split(" ").map(n => n[0]).join("").toUpperCase() : "";
          const userModel = new sap.ui.model.json.JSONModel(user);
          that.getView().setModel(userModel, "user");
          const userId = user.id;
          that._fetchResults(user.id);
          return ExamService.getAssignedExams(userId);
        })
        .then(function(data) {
          const unattempted = data.filter(e => e.attempted === 0);
          const attempted = data.filter(e => e.attempted === 1);
          // Subject-wise breakdown
          const subjectMap = {};
          data.forEach(e => {
            if (!subjectMap[e.subject]) subjectMap[e.subject] = 0;
            subjectMap[e.subject]++;
          });
          const subjectBreakdown = Object.keys(subjectMap).map(subject => ({
            subject,
            count: subjectMap[subject]
          }));
          const model = new sap.ui.model.json.JSONModel({
            unattempted: unattempted,
            attempted: attempted,
            subjectBreakdown: subjectBreakdown
          });
          that.getView().setModel(model, "exams");
        })
        .catch(function(err) {
  console.error("Dashboard load failed:", err);

  // If it's an auth error → redirect
  if (err.message && err.message.toLowerCase().includes("unauthorized")) {
    MessageBox.error("Your session has expired. Please log in again.");
    that.getRouter().navTo("login-employee");
  } else {
    // For other errors, just show them but don't kick user out
    MessageBox.error("Failed to load exams: " + err.message);
  }
});

        window.addEventListener("popstate", this._onBrowserBack = function() {that.onLogout();});
        this._examData = [];
        this.loadExamCalendar();
        // Initialize calendar model
  const oCalendarModel = new sap.ui.model.json.JSONModel([]);
  this.getView().setModel(oCalendarModel, "calendarModel");
  this._loadAnnouncements();




    },
    _loadAnnouncements: function () {
  const employeeId = 3; // Replace with actual logged-in ID

  // Load announcements
  fetch("http://localhost:4000/api/announcements")
    .then(res => res.json())
    .then(data => {
      const oModel = new JSONModel({ announcements: data });
      this.getView().setModel(oModel, "announcementModel");
    });

  // Load unread count
  fetch(`http://localhost:4000/api/announcements/unread/${employeeId}`)
    .then(res => res.json())
    .then(data => {
      const oHeaderModel = new JSONModel({
        hasUnread: data.unreadCount > 0
      });
      this.getView().setModel(oHeaderModel, "headerModel");
    });
  },
  onMarkAnnouncementRead: function (oEvent) {
  const item = oEvent.getSource();
  const context = item.getBindingContext("announcementModel");
  const data = context.getObject();

  const employeeId = 3; // Replace with logged-in ID
  const announcementId = data.id;

  fetch("http://localhost:4000/api/announcements/mark-read", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ employeeId, announcementId })
  })
    .then(res => res.json())
    .then(() => {
      data.read = true; // Update local model
      context.getModel().refresh();
      this._loadAnnouncements(); // Reload unread count
    });
},
/*onOpenAnnouncementDialog: function () {
  if (!this._oAnnouncementDialog) {
    Fragment.load({
      name: "exam.view.AnnouncementDialog",
      controller: this
    }).then(function (oDialog) {
      this._oAnnouncementDialog = oDialog;
      this.getView().addDependent(this._oAnnouncementDialog);
      this._oAnnouncementDialog.open();
    }.bind(this));
  } else {
    this._oAnnouncementDialog.open();
  }
}*/

onCloseAnnouncementDialog: function () {
  console.log("Close dialog called ✅");
  if (this._oAnnouncementDialog) {
    this._oAnnouncementDialog.close();
  }
}

,
    onCalendarSelect: function (oEvent) {
  const oCalendar = oEvent.getSource();
  const selectedDate = oCalendar.getSelectedDates()[0].getStartDate();

  const yyyyMMdd = selectedDate.toISOString().split('T')[0];

  fetch(`http://localhost:4000/api/exams/calendar/${yyyyMMdd}`)

    .then(response => response.json())
    .then(data => {
      this.getView().getModel("calendarModel").setData(data);
    })
    .catch(err => {
      console.error("Failed to fetch calendar data", err);
      sap.m.MessageToast.show("Failed to load exams.");
    });
},


    // Card click handlers
    onGoToUnattempted: function () {
      const examsModel = this.getView().getModel("exams");
      if (!examsModel) {
        sap.m.MessageBox.error("Exam data not loaded yet.");
        return;
      }
      const exams = examsModel.getProperty("/unattempted");
      if (!exams || exams.length === 0) {
        sap.m.MessageBox.information("No unattempted exams.");
        return;
      }
      this._showExamListDialog("Unattempted Exams", exams, false);
    },

    onGoToAttempted: function () {
      const examsModel = this.getView().getModel("exams");
      if (!examsModel) {
        sap.m.MessageBox.error("Exam data not loaded yet.");
        return;
      }
      const exams = examsModel.getProperty("/attempted");
      if (!exams || exams.length === 0) {
        sap.m.MessageBox.information("No attempted exams.");
        return;
      }
      this._showExamListDialog("Attempted Exams", exams, true);
    },

    onGoToResults: function () {
      const results = this.getView().getModel("results")?.getData();
      if (!results || results.length === 0) {
        sap.m.MessageBox.information("No results available yet.");
        return;
      }
      const items = results.map(function(r) {
        return new sap.m.StandardListItem({
          title: r.examTitle,
          description: `Score: ${r.total_score} | ${r.passed ? "Passed" : "Failed"}`,
          info: new Date(r.evaluated_at).toLocaleString()
        });
      });
      const dialog = new sap.m.Dialog({
        title: "Your Results",
        content: [
          new sap.m.List({
            items: items
          })
        ],
        endButton: new sap.m.Button({
          text: "Close",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },
    onExit: function() {
  if (this._onBrowserBack) {
    window.removeEventListener("popstate", this._onBrowserBack);
  }
},
onOpenAnnouncementDialog: function () {
  const that = this;

  // Load announcements first
  fetch("http://localhost:4000/api/announcements")
    .then(res => res.json())
    .then(data => {
      const oModel = new JSONModel(data);
      that.getView().setModel(oModel, "announcements");

      // Load dialog fragment
      if (!that._pDialog) {
        Fragment.load({
          name: "exam.view.AnnouncementDialog", // replace with actual namespace
          controller: that
        }).then(function (oDialog) {
          that._pDialog = oDialog;
          that.getView().addDependent(oDialog);
          oDialog.open();
        });
      } else {
        that._pDialog.open();
      }
    })
    .catch(err => {
      console.error("Error fetching announcements", err);
      MessageBox.error("Could not load announcements.");
    });
},


onAnnouncementIconPress: function () {
  const oView = this.getView();

  if (!this.pAnnouncementDialog) {
    Fragment.load({
      name: "exam.view.AnnouncementDialog",
      type: "XML",
      controller: this
    }).then(function (oDialog) {
      oView.addDependent(oDialog);
      oDialog.open();
    });
  } else {
    this.pAnnouncementDialog.open();
  }
},

    onLogout: function () {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      }
      /*window.location.replace("http://localhost:8080/test/flpSandbox.html?sap-ui-xx-viewCache=false#app-tile");*/
      this.getRouter().navTo("main");
    },

    onOpenChangePasswordDialog: function() {
      const dialog = new sap.m.Dialog({
        title: "Change Password",
        content: [
          new sap.m.Label({ text: "Old Password" }),
          new sap.m.Input("oldPasswordInput", { type: "Password" }),
          new sap.m.Label({ text: "New Password" }),
          new sap.m.Input("newPasswordInput", { type: "Password" }),
          new sap.m.Label({ text: "Confirm New Password" }),
          new sap.m.Input("confirmPasswordInput", { type: "Password" })
        ],
        beginButton: new sap.m.Button({
          text: "Change",
          press: function() {
            const oldPassword = sap.ui.getCore().byId("oldPasswordInput").getValue();
            const newPassword = sap.ui.getCore().byId("newPasswordInput").getValue();
            const confirmPassword = sap.ui.getCore().byId("confirmPasswordInput").getValue();
            if (!oldPassword || !newPassword || !confirmPassword) {
              sap.m.MessageBox.error("All fields are required.");
              return;
            }
            if (newPassword !== confirmPassword) {
              sap.m.MessageBox.error("New passwords do not match.");
              return;
            }
            // Get user_id from model
            const user = this.getView().getModel("user").getData();
            fetch("http://localhost:4000/api/users/change-password", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                user_id: user.id,
                old_password: oldPassword,
                new_password: newPassword
              }),
              credentials: "include"
            })
            .then(res => res.json())
            .then(data => {
              if (data.error) {
                sap.m.MessageBox.error(data.error);
              } else {
                sap.m.MessageBox.success("Password changed successfully!");
                dialog.close();
              }
            })
            .catch(err => {
              sap.m.MessageBox.error("Error: " + err.message);
            });
          }.bind(this)
        }),
        endButton: new sap.m.Button({
          text: "Cancel",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },

    onEditProfile: function() {
  this.byId("profileDialog").open();
},

onSaveProfile: function() {
  //const userModel = this.getView().getModel("user");
  //const updatedData = userModel.getData();
  // TODO: Call backend service to save updated profile
  // Example: AuthService.updateProfile(updatedData).then(...)
  this.byId("profileDialog").close();
  sap.m.MessageToast.show("Profile updated!");
},

onCancelProfile: function() {
  this.byId("profileDialog").close();
},
loadExamCalendar: function () {
  const that = this;

  fetch("http://localhost:4000/api/exams")
    .then(res => res.json())
    .then(data => {
      // Normalize exam dates
      data.forEach(exam => {
        if (exam.date) {
          exam.date = new Date(exam.date).toISOString().split("T")[0];
        }
      });

      // Save raw exam data
      that._examData = data;

      // --- Build Subject Breakdown ---
      const subjectBreakdown = {};
      data.forEach(exam => {
        if (exam.subject) {
          subjectBreakdown[exam.subject] = (subjectBreakdown[exam.subject] || 0) + 1;
        }
      });

      // --- Separate attempted/unattempted ---
      const attempted = data.filter(exam => exam.attempted === "1");
      const unattempted = data.filter(exam => exam.attempted === "0");

      // --- Set exams model ---
      const examsModel = new sap.ui.model.json.JSONModel({
        attempted,
        unattempted,
        subjectBreakdown: Object.keys(subjectBreakdown).map(s => ({
          subject: s,
          count: subjectBreakdown[s]
        }))
      });
      that.getView().setModel(examsModel, "exams");

      // --- Build calendar events ---
      const calendarData = data.map(exam => ({
        title: exam.title,
        date: exam.date,
        status: exam.status
      }));
      const calendarModel = new sap.ui.model.json.JSONModel(calendarData);
      that.getView().setModel(calendarModel, "calendarModel");

      console.log("✅ Exam data loaded:", data);
    })
    .catch(err => {
      console.error("❌ Error loading exam data:", err);
    });
}

,
loadAnnouncements:  function () {
  fetch("http://localhost:4000/api/announcements")
    .then(res => res.json())
    .then(data => {
      const oModel = new sap.ui.model.json.JSONModel(data);
      this.getView().setModel(oModel, "announcements");
    })
    .catch(err => {
      console.error("Error loading announcements", err);
    });
}

,

onDateSelect: function (oEvent) {
  const oCalendar = oEvent.getSource();
  const aSelectedDates = oCalendar.getSelectedDates();

  if (aSelectedDates.length) {
    const oSelectedDate = aSelectedDates[0].getStartDate();
    const sFormattedDate = this._formatDate(oSelectedDate); // "2025-07-22"

    // Simulate or fetch exams for the selected date
    const aExams = this._getExamsForDate(sFormattedDate); // static for now
    const oModel = new sap.ui.model.json.JSONModel(aExams);
    this.getView().setModel(oModel, "calendar");
  }
},

_formatDate: function (oDate) {
  const year = oDate.getFullYear();
  const month = String(oDate.getMonth() + 1).padStart(2, "0");
  const day = String(oDate.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
},

_getExamsForDate: function (dateString) {
  const mockData = {
    "2025-07-22": [
      { title: "Java Final", time: "10:00 AM", status: "Upcoming" },
      { title: "Database Systems", time: "2:00 PM", status: "Upcoming" }
    ],
    "2025-07-23": [
      { title: "SAP ABAP", time: "11:00 AM", status: "Upcoming" }
    ]
  };

  return mockData[dateString] || [];
}
,

    // Helper to show exam list dialog
    _showExamListDialog: function(title, exams, attempted) {
      const that = this;
      const items = exams.map(function(e) {
        return new sap.m.StandardListItem({
          title: e.title,
          description: e.subject,
          info: attempted ? "Attempted" : "Unattempted",
          type: attempted ? "Inactive" : "Active",
          press: function() {
            if (!attempted) {
              that.getRouter().navTo("exam", { examId: e.id });
            }
          }
        });
      });
      const dialog = new sap.m.Dialog({
        title: title,
        content: [
          new sap.m.List({
            items: items
          })
        ],
        endButton: new sap.m.Button({
          text: "Close",
          press: function() { dialog.close(); }
        })
      });
      dialog.open();
    },

  _fetchResults: function (userId) {
  const that = this;
  return fetch(`http://localhost:4000/api/users/${userId}/results`, {
    credentials: "include"
  })
    .then(async (res) => {
      if (!res.ok) {
        // Read error as text (because it might be HTML)
        const text = await res.text();
        throw new Error(`Server returned ${res.status}: ${text}`);
      }
      return res.json(); // Only parse JSON if it's valid
    })
    .then((data) => {
      const resultsModel = new sap.ui.model.json.JSONModel(data);
      that.getView().setModel(resultsModel, "results");
      return data;
    })
    .catch((err) => {
      sap.m.MessageBox.error("Failed to load results: " + err.message);
    });
}

  });});
</file>

<file path="webapp/css/custom.css">
/* General resets and body styling */
body {
 background: linear-gradient(135deg, #c3cfe2, rgb(206, 166, 194)) !important;
  
  font-family: 'Poppins', "Roboto",sans-serif;
  color: #0e0d0d;
  font-smooth: antialiased;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}
html, body, #content, #container {
  height: 100% !important;
  width: 100% !important;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Container styling for full-screen content */
#container {
  box-shadow: none;
  border-radius: 0;
  padding: 0;
  margin: 0;
  max-width: none;
  width: 100vw;
  height: 100vh;
}

/* Customize SAP buttons */
.sapMBtn {
  background: #5c6bc0 !important;
  color: white !important;
  border-radius: 8px !important;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.sapMBtn:hover {
  background: #3f51b5 !important;
}

/* Headings */
h1, h2, h3 {
  color: #2c3e50;
}

/* Optional: Card-like appearance for panels or views */
.custom-card {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
  margin-bottom: 1.5rem;
}

/* Input fields */
.sapMInputBase {
  border-radius: 6px !important;
}

/* Responsive tweaks */
@media (max-width: 768px) {
  #container {
    padding: 0;
    margin: 0;
  }
}
.dashboardContainer {
  padding: 2rem;
  background: linear-gradient(to bottom right, #f0f4f8, #ffffff);
  border-radius: 12px;
  
  height: 100%;
}

.headerBar {
  margin-bottom: 1.5rem;
  align-items: center;
}

.dashboardTitle {
  color: #0a4d8c;
  font-weight: bold;
}

.examList {
  border-radius: 8px;
  
  background-color: white;
  padding: 1rem;
}

.logoutButton {
  background-color: #e53935;
  color: white;
  border-radius: 8px;
  font-weight: bold;
}
.loginContainer {
  height: 100%;
  justify-content: center;
  align-items: center;
  background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
  color: white;
}

.loginPanel {
  background-color: white;
  border-radius: 12px;
 
  padding: 2rem;
}

.loginPanel .sapMTitle {
  font-size: 1.5rem;
  color: #2c3e50;
}

.loginButton {
  margin-top: 1rem;
  width: 100%;
  background-color: #0070f2;
  color: white;
  font-weight: bold;
}
.adminDashboardContainer {
  height: 100%;
  background: linear-gradient(135deg, #1d4350, #a43931);
  justify-content: center;
  align-items: center;
}

.adminPanel {
  background-color: #ffffff;
  border-radius: 12px;
  
  padding: 2rem;
  color: #2c3e50;
}

.adminActionButton {
  margin: 0.5rem 0;
  font-weight: bold;
  background-color: #0070f2;
  color: white;
  transition: transform 0.1s ease-in-out;
}

.adminActionButton:hover {
  transform: scale(1.02);
  background-color: #0053ba;
}
.login-container {
  height: 100vh;
  width: 100%;
}

.image-panel {
  width: 60%;
  background-color: #f0f0f0;
  overflow: hidden;
}

.login-panel {
  width: 40%;
  background-color: #6c88c5; /* Blue */
  color: white;
  padding: 4rem;
  gap: 1rem;
}

.welcome-title {
  font-size: 2rem;
  color: white;
}

.welcome-subtext {
  color: #e0e0e0;
  margin-bottom: 2rem;
}

.login-button {
  width: 80%;
  background-color: #facc15; /* Yellow */
  color: black;
  font-weight: bold;
}

.login-button:hover {
  background-color: #fcd34d;
}
.employeeDashboardRoot {
  height: 100vh;
  background: linear-gradient(135deg, #ffe0ec 0%, #f5f7fa 100%);
}

.employeeSidebar {
  background: #fff;
  
  padding: 2rem 1rem;
  align-items: center;
  min-height: 100vh;
}

.employeeAvatar {
  margin-bottom: 1rem;
  background: #ffb6c1;
}

.employeeSidebarName {
  font-weight: bold;
  margin-bottom: 2rem;
  color: #e75480;
}

.employeeSidebarList .sapMSLI {
  margin-bottom: 0.5rem;
}

.employeeMainContent {
  padding: 2rem;
  width: 100%;
}

.employeeHeaderBar {
  margin-bottom: 2rem;
  border-bottom: 1px solid #f8bbd0;
  padding-bottom: 1rem;
}

.employeeWelcome {
  font-size: 2rem;
  font-weight: bold;
  color: #e75480;
}

.employeeDetails {
  color: #888;
  font-size: 1rem;
}

.employeeCardsRow {
  gap: 2rem;
  flex-wrap: wrap;
}

.employeeCard {
  background: #fff;
  border-radius: 16px;
  
  padding: 2rem 1.5rem;
  margin-bottom: 2rem;
  align-items: center;
  text-align: center;
  transition: box-shadow 0.2s;
  border: 2px solid #ffe0ec;
}

.employeeCard:hover {
  
  border-color: #e75480;
}

.cardTitle {
  font-size: 1.2rem;
  font-weight: bold;
  margin: 1rem 0 0.5rem 0;
  color: #e75480;
}

.subjectBreakdownList .sapMSLI {
  border: none;
  background: transparent;
}
.loginContainer {
  height: 100vh;
  justify-content: center;
  align-items: center;
  background: linear-gradient(135deg, #ffe0ec 0%, #f5f7fa 100%);
}

.loginPanel {
  background-color: #fff;
  border-radius: 16px;
  
  padding: 2.5rem 2rem 2rem 2rem;
  min-width: 320px;
  max-width: 400px;
  align-items: center;
}

.loginPanel .sapMTitle {
  font-size: 1.5rem;
  color: #e75480;
}

.loginButton {
  margin-top: 1rem;
  width: 100%;
  background-color: #e75480 !important;
  color: white !important;
  font-weight: bold;
  border-radius: 8px !important;
  
}

.loginButton:hover {
  background-color: #c2185b !important;
}

.welcome-subtext {
  color: #e75480;
  margin-bottom: 1.5rem;
  font-size: 1rem;
}
  .adminSidebar { background: #f8f8f8; border-radius: 20px; }
  .statCard { background: #fff; border-radius: 16px; box-shadow: 0 2px 8px #eee; padding: 16px; margin: 8px; }
  .upgradeBanner { background: #ffe0b2; border-radius: 16px; }
  .adminSidebar {
  background: #f8f8f8;
  border-radius: 20px;
  min-height: 100vh;
  padding: 24px 0;
  box-shadow: 0 2px 8px #eee;
}
.sidebarName {
  font-weight: bold;
  font-size: 1.2rem;
  margin-top: 8px;
}
.sidebarRole {
  color: #888;
  font-size: 1rem;
  margin-bottom: 16px;
}
.statCard {
  background: #fff;
  border-radius: 16px;
  box-shadow: 0 2px 8px #eee;
  padding: 16px;
  margin: 8px;
  min-width: 160px;
  text-align: center;
}
.upgradeBanner {
  background: #ffe0b2;
  border-radius: 16px;
  padding: 16px;
  display: flex;
  align-items: center;
  gap: 16px;
}
.adminMainContent {
  padding: 32px;
}
.statsRow {
  margin-top: 24px;
}
.loginPageRoot {
  background: linear-gradient(90deg, #f8f8f8 50%, #fff 50%);
  min-height: 100vh;
}
.loginIllustrationBox {
  background: #f8f8f8;
  border-top-left-radius: 60px;
  border-bottom-left-radius: 60px;
  min-height: 100vh;
  justify-content: center;
  align-items: center;
}
.loginFormBox {
  background: #fff;
  min-height: 100vh;
  justify-content: center;
  align-items: center;
}
.loginWelcome {
  font-size: 2rem;
  font-weight: bold;
  color: #333;
  margin-bottom: 0.5rem;
}
.loginPageTitle {
  font-size: 1.5rem;
  font-weight: bold;
  color: #908dc2;
  margin-bottom: 2rem;
}
.loginForm {
  background: #fff;
  border-radius: 24px;
  box-shadow: 0 2px 16px #eee;
  padding: 32px 24px;
  margin-top: 1rem;
}
.loginInputBox {
  margin-bottom: 1.5rem;
  background: #f5f5f5;
  border-radius: 24px;
  padding: 0.5rem 1rem;
  box-shadow: 0 1px 4px #eee;
}
.loginInputIcon {
  margin-right: 0.5rem;
  font-size: 1.2rem;
}
.emailIcon {
  color: #fbbf24;
}
.passwordIcon {
  color: #6b7280;
}
.loginInput {
  border: none;
  background: transparent;
  font-size: 1rem;
}
.loginButtonGradient {
  background: linear-gradient(90deg, #4f46e5 0%, #fbbf24 100%) !important;
  color: #fff !important;
  font-weight: bold;
  border-radius: 24px;
  margin-top: 1.5rem;
  margin-bottom: 1rem;
  box-shadow: 0 2px 8px #eee;
}
.forgotPasswordLink {
  font-size: 0.9rem;
  color: #6b7280;
}
.createAccountBox {
  margin-top: 1rem;
}
.createAccountBox .sapMLnk {
  color: #4f46e5;
  font-weight: bold;
  margin-left: 0.3rem;
}
/*Employee dashboard */

.employeeDashboardRoot {
  display: flex;
  flex-direction: row;
  min-height: 100vh;
  height: auto; /* Remove height: 100vh */
  background: linear-gradient(120deg, #f5f7fa 0%, #c3cfe2 100%);
  /* Remove overflow: hidden; */
}
.dashboardHeaderBar {
  margin-bottom: 2rem;
}
.dashboardTitle {
  font-size: 2rem;
  font-weight: bold;
  color: #fff;
}
.logoutButton {
  background: #fff !important;
  color: #7b2ff2 !important;
  border-radius: 8px !important;
  font-weight: bold;
}
.dashboardMainRow {
  gap: 2rem;
}
.dashboardCard, .dashboardStatCard, .dashboardCalendarCard {
  background: #fff;
  border-radius: 24px;
  box-shadow: 0 8px 32px rgba(123,47,242,0.08);
  padding: 2rem;
  margin-bottom: 1.5rem;
}
.cardTitle {
  font-size: 1.2rem;
  color: #7b2ff2;
  font-weight: bold;
}
.pointsValue {
  font-size: 2rem;
  color: #7b2ff2;
  font-weight: bold;
}
/* Root container */
.employeeDashboardRoot {
  min-height: 100vh;
  background: linear-gradient(120deg, #f5f7fa 0%, #c3cfe2 100%);
}

/* Sidebar */
.employeeSidebar {
  background: #fff;
  box-shadow: 2px 0 8px rgba(0,0,0,0.04);
  padding: 32px 16px;
  border-radius: 12px 0 0 12px;
  min-width: 220px;
  max-width: 260px;
  height: 100vh;
  position: sticky;
  top: 0;
  align-items: center;
  overflow-y: auto;
}

/* Main content */
.employeeMainContent {
  flex: 1 1 auto;
  padding: 32px 40px;
  width: 100%;
  overflow-y: auto;
  height: auto; /* Remove height: 100vh */
  max-height: 100vh; /* Ensures it doesn't exceed viewport */
  box-sizing: border-box;
}

/* Header */
.employeeHeaderBar {
  margin-bottom: 24px;
}

.employeeWelcome {
  font-size: 1.6rem;
  font-weight: 600;
  color: #2d3a4b;
}

.employeeDetails {
  color: #6c7a89;
  font-size: 1rem;
}

/* Cards grid */
.employeeCardsRow {
  gap: 24px;
  margin-top: 16px;
  flex-wrap: wrap;
}

/* Card style */
.employeeCard {
  background: #fff;
  border-radius: 16px;
  box-shadow: 0 2px 12px rgba(44,62,80,0.07);
  padding: 24px 18px;
  margin-bottom: 16px;
  align-items: center;
  min-width: 220px;
  min-height: 180px;
  transition: box-shadow 0.2s, transform 0.2s;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.employeeCard:hover {
  box-shadow: 0 6px 24px rgba(44,62,80,0.13);
  transform: translateY(-4px) scale(1.03);
}

.cardTitle {
  font-size: 1.1rem;
  font-weight: 500;
  margin: 12px 0 8px 0;
  color: #34495e;
}

/* Subject breakdown list */
.subjectBreakdownList .sapMSLI {
  background: #f8fafc;
  border-radius: 6px;
  margin-bottom: 4px;
}

/* Progress Indicator */
.sapMProgressIndicator {
  margin-top: 12px;
  width: 90%;
}

/* Responsive adjustments */
@media (max-width: 900px) {
  .employeeDashboardRoot {
    flex-direction: column;
  }
  .employeeSidebar {
    flex-direction: row;
    width: 100%;
    border-radius: 0 0 12px 12px;
    min-height: unset;
    padding: 16px 8px;
  }
  .employeeMainContent {
    padding: 16px 8px;
  }
  .employeeCardsRow {
    gap: 12px;
  }
}
.calendarSection {
  margin-top: 2rem;
  gap: 2rem;
}

.calendarBox {
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  padding: 1rem;
  background-color: white;
  border-radius: 8px;
}

.calendarExamListBox {
  background: #f9f9f9;
  padding: 1rem;
  border-radius: 8px;
}
.calendarResultsBox {
  background-color: #fafafa;
  padding: 1rem;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(0,0,0,0.05);
}

.calendarTitle {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
}
.bellContainer {
  position: relative;
}

.redDot {
  position: absolute;
  top: 4px;
  right: 3px;
  z-index: 10;
}
html, body, #container, .sapUiBody, .sapMPage, .sapMPageEnableScrolling {
  height: 100% !important;
  width: 100% !important;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}



.login-container {
  margin: 0;
  background-color: white;
  padding: 2rem;
  border-radius: 0;
  box-shadow: none;
  text-align: center;
  max-width: none;
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}


.login-panel {
  width: 100%;
  max-width: 400px;
  padding: 2rem;
  background-color: #ffffff;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.fullscreen-center-wrapper {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  height: 100vh !important;
  width: 100vw !important;
}


.login-title {
  font-size: 2.2rem;
  color: #2c3e50;
  margin-bottom: 1rem;
}

.login-subtitle {
  font-size: 1.2rem;
  color: #7f8c8d;
  margin-bottom: 2rem;
}

.avatar-carousel {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-bottom: 2rem;
}

.avatar-section {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.avatar-image {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  object-fit: cover;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.role-label {
  margin-top: 0.8rem;
  font-size: 1.1rem;
  font-weight: bold;
  color: #333;
}

.nav-arrow {
  border-radius: 50%;
  min-width: 40px;
  height: 40px;
}
.nav-arrow {
  background-color: #f0f0f0;
  border: none;
  font-size: 1.2rem;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  transition: transform 0.2s ease-in-out;
  cursor: pointer;
}

.nav-arrow:hover {
  background-color: #0070f2;
  color: white;
  transform: scale(1.1);
}


.login-continue-btn {
  background-color: #0070f2;
  color: white;
  font-weight: bold;
  padding: 0.6rem 2rem;
  border-radius: 25px;
}

.avatar-carousel {
  margin-top: 2 rem;
  margin-bottom: 2.5 rem;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

.avatar-section {
  text-align: center;
}

.login-title, .login-subtitle {
  text-align: center;
  width: 100%;
}
/* Full-screen layout - remove centering and make content fill entire viewport */
.login-page.sapMPage .sapMPageEnableScrolling {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
}

/* Full-screen login container */
.login-container {
  width: 100vw;
  height: 100vh;
  max-width: none;
  padding: 2rem;
  background-color: white;
  border-radius: 0;
  box-shadow: none;
  text-align: center;
  animation: fadeIn 0.8s ease;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
/* Enhanced Modern Login Screen Styles */
.modern-login-page {
  background: linear-gradient(135deg, #777b91 0%, #9588a1 100%);
  min-height: 100vh;
  position: relative;
  overflow: hidden;
}

.login-background {
  position: relative;
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Enhanced animated floating shapes */
.floating-shapes {
  position: absolute;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: float 6s ease-in-out infinite;
}

.shape-1 {
  top: 15%;
  left: 8%;
  animation-delay: 0s;
}

.shape-2 {
  top: 45%;
  right: 12%;
  animation-delay: 2s;
}

.shape-3 {
  bottom: 25%;
  left: 15%;
  animation-delay: 4s;
}

.shape-4 {
  top: 70%;
  left: 5%;
  animation-delay: 1s;
  font-size: 1.5rem;
}

.shape-5 {
  top: 30%;
  right: 8%;
  animation-delay: 3s;
  font-size: 1.8rem;
}

.shape-6 {
  bottom: 15%;
  right: 20%;
  animation-delay: 5s;
  font-size: 1.3rem;
}

@keyframes float {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-20px) rotate(180deg); }
}

/* Decorative grid pattern */
.grid-pattern {
  position: absolute;
  width: 100%;
  height: 100%;
  pointer-events: none;
  opacity: 0.1;
}

.grid-row {
  justify-content: space-around;
  margin: 20px 0;
}

.grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.5rem;
  animation: pulse 4s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.8; }
}

/* Main content container with better space utilization */
.main-content-container {
  width: 100%;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 4rem;
  gap: 3rem;
}

/* Left branding section */
.branding-section {
  flex: 1;
  max-width: 500px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.brand-content {
  text-align: left;
  color: #fff;
  animation: slideInLeft 1s ease-out;
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.brand-icon {
  font-size: 4rem;
  color: #fff;
  margin-bottom: 1.5rem;
  text-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  animation: subtlePulse 3s ease-in-out infinite;
}

.brand-title {
  font-size: 3rem;
  font-weight: 700;
  color: #fff;
  margin-bottom: 1rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  letter-spacing: -0.5px;
  line-height: 1.2;
}

.brand-subtitle {
  font-size: 1.3rem;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 400;
  margin-bottom: 3rem;
  line-height: 1.5;
}

/* Feature highlights */
.feature-highlights {
  gap: 1.5rem;
}

.feature-item {
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
}

.feature-item:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: translateX(10px);
}

.feature-icon {
  font-size: 1.5rem;
  color: #fff;
}

.feature-text {
  font-size: 1.1rem;
  color: #fff;
  font-weight: 500;
}

/* Right login section */
.login-section {
  flex: 1;
  max-width: 500px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Enhanced login container with glassmorphism */
.login-container-modern {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 24px;
  padding: 3rem 2.5rem;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
  width: 100%;
  max-width: 480px;
  text-align: center;
  animation: slideInRight 1s ease-out;
  position: relative;
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Header section */
.login-header {
  margin-bottom: 2.5rem;
}

.app-icon {
  font-size: 3rem;
  color: #fff;
  margin-bottom: 1rem;
  text-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  animation: subtlePulse 3s ease-in-out infinite;
}

@keyframes subtlePulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

.modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #fff;
  margin-bottom: 0.5rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  letter-spacing: -0.5px;
}

.modern-login-subtitle {
  font-size: 1.1rem;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 400;
}

/* Role selection section */
.role-selection-container {
  margin-bottom: 2.5rem;
}

.avatar-carousel-modern {
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.modern-nav-arrow {
  background: rgba(255, 255, 255, 0.2) !important;
  border: 1px solid rgba(255, 255, 255, 0.3) !important;
  color: #fff !important;
  border-radius: 50% !important;
  width: 48px !important;
  height: 48px !important;
  transition: all 0.3s ease !important;
  backdrop-filter: blur(10px);
}

.modern-nav-arrow:hover {
  background: rgba(255, 255, 255, 0.3) !important;
  transform: scale(1.1);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.avatar-section-modern {
  text-align: center;
}

.avatar-container {
  position: relative;
  margin-bottom: 1rem;
}

.modern-avatar-image {
  width: 120px !important;
  height: 120px !important;
  border-radius: 50% !important;
  object-fit: cover;
  border: 4px solid rgba(255, 255, 255, 0.3);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
}

.modern-avatar-image:hover {
  transform: scale(1.05);
  border-color: rgba(255, 255, 255, 0.6);
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
}

.avatar-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.5);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.avatar-container:hover .avatar-overlay {
  opacity: 1;
}

.avatar-icon {
  color: #fff;
  font-size: 1.2rem;
}

.modern-role-label {
  font-size: 1.4rem;
  font-weight: 600;
  color: #fff;
  margin-bottom: 0.5rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.role-hint {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.7);
  font-style: italic;
}

/* Role indicators */
.role-indicators {
  gap: 0.5rem;
}

.role-indicator {
  font-size: 0.8rem;
  color: rgba(255, 255, 255, 0.5);
  transition: all 0.3s ease;
  cursor: pointer;
}

.role-indicator[src*="circle-task"] {
  color: rgba(255, 255, 255, 0.9);
  transform: scale(1.2);
}

/* Action section */
.login-actions {
  gap: 1.5rem;
}

.modern-continue-btn {
  background: linear-gradient(135deg, #7d83a0 0%, rgb(148, 140, 156), 117, 129) 100% ;
  color: #fff !important;
  font-weight: 600 !important;
  font-size: 1.1rem !important;
  padding: 1rem 2.5rem !important;
  border-radius: 50px !important;
  border: none !important;
  box-shadow: 0 8px 24px rgba(102, 126, 234, 0.4) !important;
  transition: all 0.3s ease !important;
  min-width: 200px;
}

.modern-continue-btn:hover {
  transform: translateY(-2px) scale(1.02);
  box-shadow: 0 12px 32px rgba(102, 126, 234, 0.6) !important;
}

.modern-continue-btn:active {
  transform: translateY(0);
}

/* Info section */
.login-info {
  gap: 0.5rem;
  align-items: center;
}

.info-icon {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.7);
}

.info-text {
  font-size: 0.85rem;
  color: rgba(255, 255, 255, 0.7);
  font-weight: 400;
}

/* Glassmorphism enhancement */
.login-container-modern::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
  border-radius: 24px;
  z-index: -1;
}

/* Responsive design */
@media (max-width: 1200px) {
  .main-content-container {
    flex-direction: column;
    padding: 2rem;
    gap: 2rem;
  }
  
  .branding-section, .login-section {
    max-width: 100%;
  }
  
  .brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .main-content-container {
    padding: 1rem;
  }
  
  .login-container-modern {
    padding: 2rem 1.5rem;
    margin: 1rem;
  }
  
  .modern-login-title {
    font-size: 2rem;
  }
  
  .brand-title {
    font-size: 2rem;
  }
  
  .modern-avatar-image {
    width: 100px !important;
    height: 100px !important;
  }
  
  .modern-continue-btn {
    min-width: 180px;
    padding: 0.8rem 2rem !important;
  }
}

@media (max-width: 480px) {
  .login-container-modern {
    padding: 2rem 1rem;
    margin: 0.5rem;
  }
  
  .modern-login-title {
    font-size: 1.8rem;
  }
  
  .brand-title {
    font-size: 1.8rem;
  }
  
  .modern-avatar-image {
    width: 80px !important;
    height: 80px !important;
  }
  
  .modern-continue-btn {
    min-width: 160px;
    padding: 0.7rem 1.5rem !important;
    font-size: 1rem !important;
  }
  
  .feature-item {
    padding: 0.8rem;
  }
  
  .feature-text {
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/*.employee-login-background {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  width: 100vw;
  height: 100vh;
  background: linear-gradient(135deg, #1f1c2c, #c2bddb) !important ;
  overflow: hidden;}*/
 .employee-login-background {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden;
  padding: 50px;
  background: linear-gradient(to right, #a4d5db, #dbaaaa) !important;/* optional */
}


.employee-main-content-container {
  display: flex;
  align-items: stretch;
  justify-content: center;
  width: 90vw;
  max-width: 1200px;
  min-height: 600px;
  height: auto;
  margin: auto;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}
.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(91, 114, 139, 1) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  color: white;
  font-size: 1.1rem;
  line-height: 1.6;
  letter-spacing: 0.3px;
  text-shadow: 0px 1px 1px rgba(0,0,0,0.3);
  border-radius: 12px;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.25;
  pointer-events: none;
  z-index: 0;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  /*background: linear-gradient(135deg, #9b9fb3 0%, #9e97a5 100%);*/
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}
.bg-override {
  background: linear-gradient(135deg, #1f1c2c, #928dab) !important;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}
.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}
.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}
.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}
.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #adb4d1 0%, #aa9bb9 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: blue;
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  z-index: 0;

  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cdefs%3E%3Cpattern id='grain' width='100' height='100' patternUnits='userSpaceOnUse'%3E%3Ccircle cx='50' cy='50' r='1' fill='rgba(255,255,255,0.1)' /%3E%3C/pattern%3E%3C/defs%3E%3Crect width='100' height='100' fill='url(%23grain)' /%3E%3C/svg%3E");
  
  background-repeat: repeat;
  opacity: 0.2; /* tweak this to make it more/less visible */
  pointer-events: none; /* ensures it doesn't block clicks */
}


.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}
.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}
@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}
.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}
/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  width: 100vw;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  overflow: hidden;
}

.employee-main-content-container {
  display: flex;
  align-items: stretch;
  justify-content: center;
  width: 90vw;
  max-width: 1200px;
  min-height: 600px;
  height: auto;
  margin: auto;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}
.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-main-content-container {
    width: 95%;
    height: 85vh;
  }
  
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-main-content-container {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
  
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}
.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}
.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}

.employee-feature-text {
  font-size: 1rem;
  font-weight: 500;
  color: white;
}

.employee-stats-container {
  margin-top: 30px;
}

.employee-stat-item {
  justify-content: space-around;
  margin-top: 20px;
}

.employee-stat-number {
  text-align: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.employee-stat-number:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.employee-stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: white;
  display: block;
  margin-bottom: 5px;
}

.employee-stat-label {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  display: block;
}

.employee-login-section {
  flex: 1;
  background: rgba(255, 255, 255, 0.95);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px 40px;
  position: relative;
}

.employee-login-container-modern {
  width: 100%;
  max-width: 400px;
  animation: employeeSlideInRight 1s ease-out 0.5s both;
}

@keyframes employeeSlideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-login-header {
  text-align: center;
  margin-bottom: 40px;
}

.employee-app-icon {
  font-size: 3rem;
  color: #667eea;
  margin-bottom: 20px;
  animation: employeeSubtlePulse 2s ease-in-out infinite;
}

@keyframes employeeSubtlePulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.employee-modern-login-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 10px;
}

.employee-modern-login-subtitle {
  font-size: 1.1rem;
  color: #666;
  line-height: 1.5;
}

.employee-login-form-container {
  width: 100%;
}

.employee-input-group {
  margin-bottom: 30px;
}

.employee-input-container {
  position: relative;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 15px;
  padding: 15px 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.employee-input-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-color: rgba(102, 126, 234, 0.3);
}

.employee-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
}

.employee-input-icon {
  font-size: 1.2rem;
  color: #667eea;
  margin-right: 15px;
}

.employee-modern-input {
  border: none;
  background: transparent;
  font-size: 1rem;
  width: 100%;
  outline: none;
}

.employee-modern-input::placeholder {
  color: #999;
}

.employee-forgot-password-container {
  margin-bottom: 30px;
}

.employee-forgot-password-link {
  color: #667eea;
  font-size: 0.9rem;
  text-decoration: none;
  transition: all 0.3s ease;
}

.employee-forgot-password-link:hover {
  color: #5a67d8;
  text-decoration: underline;
}

.employee-modern-login-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  font-weight: 600;
  font-size: 1.1rem;
  border-radius: 15px;
  padding: 15px 30px;
  border: none;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.employee-modern-login-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.employee-modern-login-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.employee-modern-login-btn:hover::before {
  left: 100%;
}

.employee-modern-login-btn:active {
  transform: translateY(0);
}

.employee-login-info {
  margin-top: 30px;
  padding: 15px;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 10px;
  border: 1px solid rgba(102, 126, 234, 0.2);
}

.employee-info-icon {
  font-size: 1rem;
  color: #667eea;
  margin-right: 10px;
}

.employee-info-text {
  font-size: 0.9rem;
  color: #666;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .employee-branding-section, .employee-login-section {
    padding: 40px 30px;
  }
  
  .employee-brand-title {
    font-size: 2.5rem;
  }
}

@media (max-width: 768px) {
  .employee-branding-section {
    padding: 40px 20px;
    min-height: 40vh;
  }
  
  .employee-login-section {
    padding: 40px 20px;
    min-height: 60vh;
  }
  
  .employee-modern-login-title {
    font-size: 2rem;
  }
  
  .employee-brand-title {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .employee-login-container-modern {
    max-width: 100%;
  }
  
  .employee-modern-login-title {
    font-size: 1.8rem;
  }
  
  .employee-brand-title {
    font-size: 1.8rem;
  }
  
  .employee-input-container {
    padding: 12px 15px;
  }
  
  .employee-modern-login-btn {
    padding: 12px 20px;
    font-size: 1rem;
  }
}

/* Smooth transitions for all interactive elements */
* {
  transition: all 0.3s ease;
}

/* Additional visual enhancements */
.feature-item {
  animation: slideInFromLeft 0.8s ease-out;
  animation-delay: calc(var(--item-index, 0) * 0.2s);
}

.feature-item:nth-child(1) { --item-index: 1; }
.feature-item:nth-child(2) { --item-index: 2; }
.feature-item:nth-child(3) { --item-index: 3; }

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Enhanced grid pattern */
.grid-pattern {
  animation: fadeIn 2s ease-out;
}

.grid-row:nth-child(1) {
  animation: slideInFromTop 1.5s ease-out;
}

.grid-row:nth-child(2) {
  animation: slideInFromBottom 1.5s ease-out;
}

@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Enhanced floating shapes */
.floating-shape {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.shape-4, .shape-5, .shape-6 {
  animation: floatAndGlow 8s ease-in-out infinite;
}

@keyframes floatAndGlow {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
  }
  50% { 
    transform: translateY(-25px) rotate(180deg);
    filter: drop-shadow(0 8px 16px rgba(255, 255, 255, 0.3));
  }
}

/* Enhanced brand section */
.brand-content {
  position: relative;
}

.brand-content::before {
  content: '';
  position: absolute;
  top: -20px;
  left: -20px;
  right: -20px;
  bottom: -20px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
  border-radius: 20px;
  z-index: -1;
  animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
  from { opacity: 0.3; }
  to { opacity: 0.6; }
}

/* Enhanced feature items */
.feature-item {
  position: relative;
  overflow: hidden;
}

.feature-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.feature-item:hover::before {
  left: 100%;
}

/* Enhanced login container */
.login-container-modern {
  position: relative;
  overflow: hidden;
}

.login-container-modern::after {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Enhanced button effects */
.modern-continue-btn {
  position: relative;
  overflow: hidden;
}

.modern-continue-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s ease;
}

.modern-continue-btn:hover::before {
  left: 100%;
}

/* Enhanced avatar effects */
.avatar-container {
  position: relative;
}

.avatar-container::after {
  content: '';
  position: absolute;
  top: -10px;
  left: -10px;
  right: -10px;
  bottom: -10px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { 
    transform: scale(1);
    opacity: 0.3;
  }
  50% { 
    transform: scale(1.1);
    opacity: 0.6;
  }
}

/* Employee Login Page Styles */
.employee-login-page {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.employee-login-background {
  position: relative;
  width: 100%;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.employee-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.employee-floating-shape {
  position: absolute;
  color: rgba(255, 255, 255, 0.1);
  font-size: 2rem;
  animation: employeeFloat 6s ease-in-out infinite;
}

.employee-floating-shape.shape-1 {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.employee-floating-shape.shape-2 {
  top: 20%;
  right: 15%;
  animation-delay: 1s;
}

.employee-floating-shape.shape-3 {
  bottom: 30%;
  left: 20%;
  animation-delay: 2s;
}

.employee-floating-shape.shape-4 {
  bottom: 20%;
  right: 10%;
  animation-delay: 3s;
}

.employee-floating-shape.shape-5 {
  top: 50%;
  left: 5%;
  animation-delay: 4s;
}

.employee-floating-shape.shape-6 {
  top: 60%;
  right: 5%;
  animation-delay: 5s;
}

@keyframes employeeFloat {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
    opacity: 0.1;
  }
  50% {
    transform: translateY(-20px) rotate(180deg);
    opacity: 0.3;
  }
}

.employee-grid-pattern {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  opacity: 0.05;
}

.employee-grid-row {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.employee-grid-dot {
  color: rgba(255, 255, 255, 0.3);
  font-size: 0.8rem;
  animation: employeePulse 3s ease-in-out infinite;
}

@keyframes employeePulse {
  0%, 100% {
    opacity: 0.3;
    transform: scale(1);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.2);
  }
}

.employee-main-content-container {
  position: relative;
  z-index: 2;
  width: 90%;
  max-width: 1400px;
  display: flex;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: employeeSlideInUp 1s ease-out;
}

@keyframes employeeSlideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.employee-branding-section {
  flex: 1;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
  padding: 60px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}
.employee-branding-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.employee-brand-content {
  text-align: center;
  color: white;
  animation: employeeSlideInLeft 1s ease-out 0.3s both;
}

@keyframes employeeSlideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.employee-brand-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  color: rgba(255, 255, 255, 0.9);
  animation: employeeGlow 2s ease-in-out infinite alternate;
}

@keyframes employeeGlow {
  from {
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
  }
  to {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
  }
}

.employee-brand-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.employee-brand-subtitle {
  font-size: 1.2rem;
  margin-bottom: 40px;
  opacity: 0.9;
  line-height: 1.6;
}

.employee-feature-highlights {
  margin-bottom: 40px;
}

.employee-feature-item {
  align-items: center;
  margin-bottom: 15px;
  padding: 10px 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  animation: employeeSlideInFromLeft 0.8s ease-out both;
}

.employee-feature-item:nth-child(1) { animation-delay: 0.4s; }
.employee-feature-item:nth-child(2) { animation-delay: 0.6s; }
.employee-feature-item:nth-child(3) { animation-delay: 0.8s; }
.employee-feature-item:nth-child(4) { animation-delay: 1.0s; }

.employee-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
}

.employee-feature-icon {
  font-size: 1.2rem;
  margin-right: 15px;
  color: rgba(255, 255, 255, 0.9);
}
/*---------------- Admin Login Screen -----------------*/

/* === Glassmorphism Background & Animations === */
.admin-login-page {
  background: linear-gradient(135deg, rgba(34, 193, 195, 0.2), rgba(253, 187, 45, 0.2));
  backdrop-filter: blur(10px);
  min-height: 100vh;
  padding: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 1s ease-out;
}

/* Floating Background Icons */
.admin-floating-shapes {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  padding: 20px;
  display: flex;
  justify-content: space-around;
  pointer-events: none;
  z-index: 0;
}

.admin-floating-shape {
  font-size: 2rem;
  color: rgba(255, 255, 255, 0.1);
  animation: float 4s ease-in-out infinite;
}

.shape-1 { animation-delay: 0s; }
.shape-2 { animation-delay: 1s; }
.shape-3 { animation-delay: 2s; }
.shape-4 { animation-delay: 3s; }

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

/* Main Glass Container */
.admin-main-content-container {
  margin: auto; /* centers it horizontally */
  width: 90vw;
  max-width: 1200px;
  min-height: 600px;
  height: auto;
  display: flex;
  align-items: stretch;
  justify-content: center;
  background:linear-gradient(to right, #a4d5db, #dbaaaa) !important;;
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  animation: fadeInScale 1s ease-in-out;
}

/* Branding Section */
.admin-branding-section {
  flex: 1;
  background: linear-gradient(135deg, #a4d5db, #dbaaaa);
  padding: 100px 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  animation: fadeInRight 1s ease-in-out;
}

.admin-brand-content {
  color: white;
  text-align: left;
  animation: floatIn 1s ease-in-out;
}

.admin-brand-title {
  font-size: 2rem;
  font-weight: bold;
  margin-top: 10px;
}

.admin-feature-highlights {
  margin-top: 20px;
}

/* Glassy hover panel effect */
.admin-feature-item {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 10px 15px;
  margin: 8px 0;
  backdrop-filter: blur(10px);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
}

/* Hover effect */
.admin-feature-item:hover {
  transform: translateY(-5px) scale(1.02);
  box-shadow: 0 10px 25px rgba(255, 255, 255, 0.2);
  background: rgba(255, 255, 255, 0.1);
}

/* Icon glow on hover */
.admin-feature-item:hover .admin-feature-icon {
  color: #FFD700;
  text-shadow: 0 0 8px #FFD700;
  transition: color 0.3s, text-shadow 0.3s;
}

/* Text glow on hover */
.admin-feature-item:hover .admin-feature-text {
  color: #fff;
  text-shadow: 0 0 6px rgba(255, 255, 255, 0.7);
  transition: text-shadow 0.3s;
}

.admin-feature-item {
  display: flex;
  align-items: center;
  margin: 5px 0;
}

.admin-feature-icon {
  margin-right: 10px;
  color: white;
}

.admin-feature-text {
  color: white;
}

/* Login Section */
.admin-login-section {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60px;
  animation: fadeInRight 1s ease-in-out;
}

.admin-login-container-modern {
  width: 100%;
  max-width: 400px;
  background: rgba(255, 255, 255, 0.15);
  border-radius: 20px;
  padding: 30px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
  animation: fadeInUp 1s ease-out;
}

/* Login Inputs & Icons */
.admin-input-container {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 10px;
  padding: 10px;
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.admin-input-icon {
  margin-right: 10px;
  color: #fff;
}

.admin-modern-input {
  background: transparent;
  border: none;
  color: #fff;
  width: 100%;
}

.admin-modern-input::placeholder {
  color: rgba(255,255,255,0.7);
}

/* Buttons */
.admin-modern-login-btn {
  background: rgba(255,255,255,0.2);
  color: white;
  border-radius: 10px;
  margin-top: 10px;
}

/* Info */
.admin-login-info {
  margin-top: 20px;
  color: #fff;
}

.admin-info-icon {
  margin-right: 5px;
}

/* Decorative Grid Dots */
.admin-grid-pattern {
  position: absolute;
  top: 20px;
  right: 20px;
  display: flex;
  flex-direction: column;
}

.admin-grid-row {
  display: flex;
}

.admin-grid-dot {
  color: rgba(255,255,255,0.2);
  margin: 2px;
  font-size: 0.75rem;
}

/* Animations */
@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes floatIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}


/* Sidebar Styles */
.adminSidebar {
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(15px);
  -webkit-backdrop-filter: blur(15px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  padding: 20px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  animation: slideInLeft 1s ease;
}

.sidebarName,
.sidebarRole {
  text-align: center;
  font-weight: 500;
  color: #333;
}

.adminSidebar .sapMLIB {
  border-radius: 12px;
  margin-top: 8px;
  transition: all 0.3s ease;
  padding: 10px;
  background: rgba(255, 255, 255, 0.2);
}

.adminSidebar .sapMLIB:hover {
  background: rgba(255, 255, 255, 0.4);
  transform: translateX(5px);
  cursor: pointer;
}

/* Main Content Area */
.adminMainContent {
  background: rgba(255, 255, 255, 0.4);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 32px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
  animation: fadeInUp 1s ease;
}

/* Stat Cards */
.statCard {
  transition: all 0.3s ease;
}

.statCard:hover {
  transform: translateY(-5px) scale(1.02);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
}

/* Panels */
.sapMPanel {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 20px !important;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  backdrop-filter: blur(12px);
  transition: all 0.3s ease;
}

.sapMPanel:hover {
  transform: scale(1.01);
}

/* Branding Hover Items */
.admin-feature-item {
  transition: transform 0.3s ease, background 0.3s ease;
  padding: 10px;
  border-radius: 12px;
}

.admin-feature-item:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(10px);
  cursor: pointer;
}

/* Animations */
@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-60px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
</file>

</files>
